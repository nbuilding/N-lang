// Based on docs/features/internal_libraries.md

let pub main = [_: ()] -> cmd[()] {
	import fek

	assert type fek.paer : str -> cmd[()]
	assert value fek.paer("hi")! = ()

	import FileIO

	assert type FileIO.write : str -> str -> cmd[()]
	assert value FileIO.write("./ignored/test.txt", "test")! = ()

	assert type FileIO.append : str -> str -> cmd[()]
	assert value FileIO.append("./ignored/test.txt", "test")! = ()

	assert type FileIO.read : str -> cmd[maybe[str]]
	// QUESTION: Is there a trailing newline?
	assert value FileIO.read("./ignored/test.txt")! = "testtest"

	import json

	let value = json.object(mapFrom([
		("test", json.string("test"))
	]))
	assert type value : json.value

	assert type json.stringify : json.value -> str
	assert value json.stringify(value) = "{\"test\":\"test\"}"

	assert type json.parse : str -> json.value
	assert value json.parse("{ test: \"test\" }") = json.null
	assert value json.parse("{ \"test\": \"test\" }") = value

	assert type json.parseSafe : str -> maybe[json.value]
	assert value json.parseSafe("{ test: \"test\" }") = none
	assert value json.parseSafe("{ \"test\": \"test\" }") = yes(value)

	import request

	assert type request.get : str -> map[str, str] -> cmd[{
		code: int
		response: str
		return: json.value
	}]
	assert value request.get("https://httpbin.org/base64/SFRUUEJJTiBpcyBhd2Vzb21l", mapFrom([]))! = {
		code: 200
		response: "OK"
		return: json.string("HTTPBIN is awesome")
	}
	assert value request.get("definitely invalid url", mapFrom([("","")]))! = {
		code: 0
		response: ""
		return: json.null
	}

	assert type request.post : str -> map[str, str] -> map[str, str] -> cmd[{
		code: int
		response: str
		text: str
	}]
	let response = request.post("https://httpbin.org/post", mapFrom([]), mapFrom([]))!
	assert value (response.code, response.response) = (200, "OK")
	assert value len(response.text) > 100
	assert value request.post("definitely invalid url", mapFrom([("hello", "hello")]), mapFrom([("","")]))! = {
		code: 0
		response: ""
		text: ""
	}

	import SystemIO

	assert type SystemIO.inp : str -> cmd[str]
	// TODO: How to test SystemIO.inp?

	import times

	assert type times.sleep : int -> cmd[()]
	// TODO: How to test times.sleep?

	import websocket

	assert type websocket.connect : websocketconnectOptions -> str -> cmd[maybe[str]]

	assert value websocket.connect({
		onOpen: [send: websocket.send] -> cmd[bool] {
			assert type send : str -> cmd[()]
			send("hi")!
			return false
		}
		onMessage: [send: websocket.send message: str] -> cmd[bool] {
			assert type send : str -> cmd[()]
			assert value message = "hi" | message = "hello"
			send("hello")!
			return message == "hello"
		}
	}, "wss://echo.websocket.org")! = none

	assert value websocket.connect({
		onOpen: [send: websocket.send] -> cmd[bool] {
			return true
		}
		onMessage: [send: websocket.send message: str] -> cmd[bool] {
			return true
		}
	}, "definitely invalid url")! /= none
}
