// Based on docs/features/internal_libraries.md

let pub main = [_: ()] -> cmd[()] {
	import FileIO

	assert type FileIO.write : str -> str -> cmd[()]
	assert value FileIO.write("./ignored/test.txt", "test")! = ()

	assert type FileIO.append : str -> str -> cmd[()]
	assert value FileIO.append("./ignored/test.txt", "test")! = ()

	assert type FileIO.read : str -> cmd[maybe[str]]
	// QUESTION: Is there a trailing newline?
	assert value FileIO.read("./ignored/test.txt")! = yes("testtest")

	assert type FileIO.writeBytes : str -> list[int] -> cmd[()]
	assert value FileIO.writeBytes("./ignored/bytes.txt", [1, 2, 3])! == ()

	assert type FileIO.appendBytes : str -> list[int] -> cmd[()]
	assert value FileIO.appendBytes("./ignored/bytes.txt", [4, 5, 6])! == ()

	assert type FileIO.readBytes : str -> cmd[maybe[list[int]]]
	assert value FileIO.readBytes("./ignored/bytes.txt")! == yes([1, 2, 3, 4, 5, 6])

	assert type FileIO.getFiles : str -> cmd[list[(bool, str)]]
	let files = FileIO.getFiles("./ignored/")!
	assert value (true, "text.txt") in files
	assert value (true, "bytes.txt") in files

	import json

	let value = json.object(mapFrom([
		("test", json.string("test"))
	]))
	assert type value : json.value

	assert type json.stringify : json.value -> str
	assert value json.stringify(value) = "{\"test\":\"test\"}"

	assert type json.parse : str -> json.value
	assert value json.parse("{ test: \"test\" }") = json.null
	assert value json.parse("{ \"test\": \"test\" }") = value

	assert type json.parseSafe : str -> maybe[json.value]
	assert value json.parseSafe("{ test: \"test\" }") = none
	assert value json.parseSafe("{ \"test\": \"test\" }") = yes(value)

	import request

	assert type request.get : str -> map[str, str] -> cmd[{
		code: int
		response: str
		return: json.value
	}]
	assert value request.get("https://httpbin.org/base64/SFRUUEJJTiBpcyBhd2Vzb21l", mapFrom([]))! = {
		code: 200
		response: "OK"
		return: json.string("HTTPBIN is awesome")
	}
	assert value request.get("definitely invalid url", mapFrom([]))! = {
		code: 400
		response: "Cannot connect"
		return: json.null
	}

	assert type request.post : str -> map[str, str] -> map[str, str] -> cmd[{
		code: int
		response: str
		text: str
	}]
	let response = request.post("https://httpbin.org/post", mapFrom([]), mapFrom([]))!
	assert value (response.code, response.response) = (200, "OK")
	assert value len(response.text) > 100
	assert value request.post("definitely invalid url", mapFrom([("hello", "hello")]), mapFrom([]))! = {
		code: 0
		response: ""
		text: ""
	}

	// TODO: Runtime tests for these types of requests

	assert type request.delete : str -> map[str, str] -> cmd[{
		code: int
		response: str
		return: json.value
	}]

	assert type request.head : str -> map[str, str] -> cmd[{
		code: int
		response: str
		return: json.value
	}]

	assert type request.options : str -> map[str, str] -> cmd[{
		code: int
		response: str
		return: json.value
	}]

	assert type request.patch : str -> map[str, str] -> cmd[{
		code: int
		response: str
		text: str
	}]

	assert type request.put : str -> map[str, str] -> cmd[{
		code: int
		response: str
		text: str
	}]

	alias onRequest = str -> str -> json.value -> cmd[{
		responseCode: int
		data: list[int]
		headers: map[str, str]
		mimetype: str
	}]
	assert type request.createServer : int -> onRequest -> cmd[()]

	import SystemIO

	assert type SystemIO.inp : str -> cmd[str]
	// TODO: How to test SystemIO.inp?

	import times

	assert type times.sleep : int -> cmd[()]
	assert type times.getTime : () -> cmd[float]

	let now = times.getTime()!
	let _ = times.sleep(1000)!
	// Allow some wiggle room because timing is hard
	assert value times.getTime()! - now > 800.0

	import websocket

	alias connectOptions = {
		onOpen: websocket.send -> cmd[bool]
		onMessage: websocket.send -> cmd[bool]
	}
	assert type websocket.connect : connectOptions -> str -> cmd[maybe[str]]

	assert value websocket.connect({
		onOpen: [send: websocket.send] -> cmd[bool] {
			assert type send : str -> cmd[result[int, ()]]
			let _ = send("hi")!
			return false
		}
		onMessage: [send: websocket.send message: str] -> cmd[bool] {
			assert type send : str -> cmd[result[int, ()]]
			assert value message = "hi" | message = "hello"
			let _ = send("hello")!
			return message == "hello"
		}
	}, "wss://echo.websocket.org")! = none

	assert value websocket.connect({
		onOpen: [send: websocket.send] -> cmd[bool] {
			return true
		}
		onMessage: [send: websocket.send message: str] -> cmd[bool] {
			return true
		}
	}, "definitely invalid url")! /= none

	alias setupOptions = {
		onConnect: websocket.user -> str -> cmd[bool]
		onMessage: websocket.user -> str -> cmd[bool]
		onDisconnect: websocket.user -> maybe[{ code: int; reason: str }] -> cmd[bool]
	}
	assert type websocket.createServer : setupOptions -> int -> cmd[maybe[()]]
}

let pub out = main()