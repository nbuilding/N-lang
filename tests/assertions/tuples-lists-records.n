// Based on docs/features/tuples_lists_records.md

let tuplevalue = (1, \{a})
assert type tuplevalue : (int, char)

let recordValue = { value: 1 }
assert type recordValue : { value: int }

let value = recordValue.value
assert type value : int
assert value value == 1

// Ensure that record fields can be in any order
assert type { b: 3.14; a: "pi" } : { a: str; b: float }
assert value { a: "pi"; b: 3.14 } == { b: 3.14; a: "pi" }

let listvalue = ["a", "b", "c"]
assert type listvalue : list[str]

assert value append("d", listvalue) == ["a", "b", "c", "d"]
assert value listvalue == ["a", "b", "c"]

let listindexvalue = itemAt(1, listvalue)
assert value listindexvalue == yes("b")

// Spread operator, from #168
let errer = [1, 2, 3]
assert value [..errer, 5, 5, 5, ..errer] == [1, 2, 3, 5, 5, 5, 1, 2, 3]

let r = {
	test: 1
	test1: 2
}

assert value {
	..r
	test1: 3
	test2: "reer"
} == {
  test: 1
  test1: 3
  test2: "reer"
}

assert value {
	test1: 3
	test2: "reer"
	..r
} == {
  test: 1
  test1: 2
  test2: "reer"
}

// Ensure that map fields can be in any order
assert value mapFrom([("a", 1), ("b", 2)]) == mapFrom([("b", 2), ("a", 1)])

// Spreading tuples into function arguments (#260)
let func = [a: int b: char c: float] -> (float, int, char) {
	return (c, a, b)
}

assert value func(..tuplevalue, 3.14) == (3.14, 1, \{a})

let printNums = [a:int b:int c:int] -> cmd[()] {
  assert value a == 1
  assert value b == 2
  assert value c == 3
}

let tuple = (1, 2)

let pub main = printNums(..tuple,)(3)
