// Based on docs/features/native_functions.md

assert type intInBase10 : int -> str
assert value intInBase10(10) = "10"

assert type round : float -> int
assert value round(10.5) = 11
assert value round(-10.5) = -10

assert type floor : float -> int
assert value floor(10.5) = 10
assert value floor(-10.5) = -11

assert type ceil : float -> int
assert value ceil(10.5) = 11
assert value ceil(10.4) = 11
assert value ceil(-10.5) = -10

assert type charCode : char -> int
assert value charCode(\{a}) = 97
assert value charCode(\{ðŸ•´}) = 0x1f574

assert type intCode : int -> char
assert value intCode(32) = \{ }
assert value intCode(-1) = \u{FFFD}

assert type charAt : int -> str -> maybe[char]
assert value charAt(1, "abc") = yes(\{b})
assert value charAt(-1, "abc") = none

assert type substring : int -> int -> str -> str
assert value substring(0, 2, "abc") = "ab"
assert value substring(-3, -1, "apple sauce") = "uc"
assert value substring(0, -1, "banana jam") = "banana ja"
assert value substring(0, 100, "hi") = "hi"
assert value substring(2, 100, "hi") = ""
assert value substring(5, 3, "hello world") = ""

assert type toFloat : int -> float
assert value toFloat(3) == 3.0

assert type len : [t] t -> int
assert value len("abc") = 3
assert value len(100) = 0

assert type split : char -> str -> list[str]
assert value split(\{b}, "abc") = ["a", "c"]
assert value split(\{b}, "") = []
assert value split(\{b}, "apple") = ["apple"]

assert type strip : str -> str
assert value strip(" abc ") = "abc"

assert type range : int -> int -> int -> list[int]
assert value range(0, 3, 1) = [0, 1, 2]
// From https://docs.python.org/3/library/stdtypes.html#range
assert value range(0, 10, 1) = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
assert value range(1, 11, 1) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
assert value range(0, 30, 5) = [0, 5, 10, 15, 20, 25]
assert value range(0, 10, 3) = [0, 3, 6, 9]
assert value range(0, -10, -1) = [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
assert value range(0, 0, 1) = []
assert value range(1, 0, 1) = []

assert type print : [t] t -> t
assert value print("test") = "test"

assert type printWithEnd : [t] str -> t -> t
let printed = 3.14
	|> printWithEnd(" ")
assert value printed == 3.14

assert type itemAt : [t] int -> list[t] -> maybe[t]
assert value itemAt(1, [1, 2, 3]) = yes(2)
assert value itemAt(-1, [1, 2, 3]) = none

assert type append : [t] t -> list[t] -> list[t]
let list = [1, 2, 3]
assert value append(4, list) = [1, 2, 3, 4]
// `list` should not be mutated
assert value list = [1, 2, 3]

assert type subsection : [t] int -> int -> list[t] -> list[t]
assert value subsection(2, 4, [0, 1, 2, 3, 4, 5]) == [2, 3]
assert value subsection(4, 1000, [0, 1, 2, 3, 4, 5]) == [4, 5]
assert value subsection(-3, -5, [1, 2, 3]) == []
assert value subsection(-3, 1, [1, 2, 3]) == [1]
assert value subsection(3, 2, [1, 2, 3]) == []

assert type filterMap : [a, b] (a -> maybe[b]) -> list[a] -> list[b]
assert value filterMap([value:int] -> maybe[int] {
	return yes(value * value + 1)
}, [0, 1, 2, 3, 4]) = [1, 2, 5, 10, 17]

assert type default : [t] t -> maybe[t] -> t
assert value default("test1", yes("test")) = "test"
assert value default("test1", none) = "test1"

assert type then : [a, b] (a -> cmd[b]) -> cmd[a] -> cmd[b]
import FileIO
assert type then([text: maybe[str]] -> cmd[()] {
	assert value len(text |> default("")) > 0
}, FileIO.read("./README.md")) : cmd[()]

// See #228
let getData = () |> ([] -> cmd[map[str, str]] {
	return mapFrom([("hi", "hello")])
})
let out = getData
	|> then(
		[data:map[str, str]] -> cmd[()] {
			assert value data == mapFrom([("hi", "hello")])
		}
	)

assert type mapFrom : [k, v] list[(k, v)] -> map[k, v]
let map = mapFrom([("a", 1), ("b", 2)])
assert type map : map[str, int]

assert type getValue : [k, v] k -> map[k, v] -> maybe[v]
assert value getValue("b", map) = yes(2)
assert value getValue("c", map) = none
// TODO: N currently allows functions and commands as keys; how should they be
// dealt with?

assert type entries : [k, v] map[k, v] -> list[(k, v)]
assert value entries(map) = [("a", 1), ("b", 2)]

assert type intoModule : [m] m -> maybe[module]
assert type getUnitTestResults :
	module -> list[{
		hasPassed: bool
		fileLine: int
		unitTestType: str
		possibleTypes: maybe[(str, str)]
	}]

if let <yes module> = intoModule(imp "./imports/unit-test.n") {
	let results = getUnitTestResults(module)

	assert value len(results) == 4

	assert value (results |> itemAt(0)) == yes({
		hasPassed: true
		fileLine: 3
		unitTestType: "value"
		possibleTypes: none
	})

	assert value (results |> itemAt(1)) == yes({
		hasPassed: false
		fileLine: 5
		unitTestType: "value"
		possibleTypes: none
	})

	for (result in (results |> subsection(2, 4))) {
		assert value result.hasPassed
		assert value result.unitTestType == "type"
		// I'm not sure if `display_type`'s output is standardised yet
		assert value if let <yes _> = result.possibleTypes { true } else { false }
	}

	assert value (results |> itemAt(2) |> default({
		hasPassed: true
		fileLine: 0
		unitTestType: "value"
		possibleTypes: none
	})).fileLine == 7

	assert value (results |> itemAt(3) |> default({
		hasPassed: true
		fileLine: 0
		unitTestType: "value"
		possibleTypes: none
	})).fileLine == 9
}

let pub main = () |> ([] -> cmd[()] {
	let _ = out!
})
