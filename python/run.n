import fek
import SystemIO

let runner = imp runner

let main = [test:int test1:str] -> bool {
	print "# Main"
	print test
	print test1
	// if test1 == hi {return true}
	return false
}

let wowowo = {
  ok: (3, (("happy", \r), true))
  uwu: "ok"//; extra: 3.4; extra2: 5.4
}
let { uwu; ok: aaa, ((caa, _), (((baa)))) } = wowowo
print { uwu; aaa; caa; baa }

for i 15 {
	let n:int = i + 1
	print
		(if n % 3 == 0 && n % 5 == 0 {
			"Fizzbuzz"
		} else if n % 3 == 0 {
			"Fizz"
		} else if n % 5 = 0 {
			"Buzz"
		} else {
			<intInBase10 n>
		})
}

let test:int = if ! 1 == 1 || 2 > 3 1 else 3
let test1:int = 1 + 1
let eee:str = "hi"

let a:int = 1
let b:int = 3
let c:int = 2
print (a < c < b)

var c = 4 + 3
print "-------------"

print c

print <round 10.1>

print "a"
        |> <charAt 0>
        |> <charCode>

if false {
	print "test of a thing"
}

let thing = {
	a: 0
}

print thing.a

let ch:char = \n

let lis = [1, 2, 3, 4]

if let [a, b, c, d] = lis {
  print { a; b; c; d }
}

// let list:list[func] = [main]

print main.<type>

// var list = [1]

let tup:(int, str) = (1, eee)

print tup

print ch

print (0.1 + 0.2 == 0.3)

<main test1 eee>
<fek?paer "test">
print (<fek?paer "test">)
print (if true { "hi" } else { "hello" })
if true {
	print ("<main test \"hello\"> returned false")
} else {
	print "test"
}
if <main test eee> {
	print "{main test eee} returned true"
} else {
	print "{main test eee} returned false"
}

print (2 + 3 * (4 + 1) * 4 + 5)








print runner.eeeeee


// if true {"teste"}