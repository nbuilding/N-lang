import request

// important variables
let key:str = ""

let header = {Authorization: "Bot " + key}

// custom types

type status = online
            | away
            | offline

alias color = {
	r:int
	g:int
	b:int
}

alias role = {
	color:color
	name:str
	rank:int
}

alias member = {
	id:str
	name:str
	icon:str
	bot:bool
//	status:status this needs a gateway
//	customStatus:maybe[str] this needs a gateway
}

alias guild = {
	id:str
	name:str
	emojis:list[str]
	icon:str
	members:list[member]
	banlist:list[member]
}

alias channel = {
	id:str
	name:str
	guild:guild
	membersAllowed:list[member]
}

alias message = {
	id:str
	content:str
	sender:member
	textChannel:bool
}

alias reaction = {
	emoji:str
	message:message
	sender:member
}

// internal functions
let parseUserData = [data:str] -> member{
	let parsed = data
	               |> <split \{,}>
	   
	return {
		id: parsed
				|> <itemAt 0>
				|> <default "">
				|> <split \{:}>
				|> <itemAt 1>
				|> <default "">
				|> <substring 1 -1>
		name: parsed
				  |> <itemAt 1>
				  |> <default "">
				  |> <split \{:}>
				  |> <itemAt 1>
				  |> <default "">
				  |> <substring 1 -1>
				  |> <itemAt 2>
				  |> <default "">
				  |> <split \{:}>
				  |> <itemAt 1>
				  |> <default "">
				  |> <substring 1 -1>
		bot: (parsed
			      |> <itemAt 6>
				  |> <default "">
			      |> <split \{:}>
			      |> <itemAt 1>
				  |> <default "">
			      |> <strip>) == "true"

	}
}

// public functions
let pub start = [k:str] -> () {
	var key = k
	var header = {Authorization: "Bot " + key}
	// other important functions idk what is going to happen here
}

let pub getKey = [] -> str{
	return key
}

let pub getSelf = [] -> (bool, member) {
	let r = <request.get "https://discord.com/api/users/@me">
	if r.code /= 200{
		return (false, {
			id:""
			name:""
			icon:""
			bot:false
//			status:offline
//			customStatus:null
		})
	}

	return (true, <parseUserData r.text>)


}