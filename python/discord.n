import request

// important variables
let key:str = ""

let header: map[str, str] = <mapFrom [
	("Content-Type", "application/json"),
	("Authorization", "Bot " + key)
]>

// custom types

type status = online
            | away
            | offline

alias color = {
	r:int
	g:int
	b:int
}

alias role = {
	color:color
	name:str
	rank:int
}

alias member = {
	id:str
	name:str
	icon:str
	bot:bool
//	status:status this needs a gateway
//	customStatus:maybe[str] this needs a gateway
}

alias guild = {
	id:str
	name:str
	emojis:list[str]
	icon:str
	members:list[member]
	banlist:list[member]
}

alias channel = {
	id:str
	name:str
	guild:guild
	membersAllowed:list[member]
}

alias message = {
	id:str
	content:str
	sender:member
	textChannel:bool
}

alias reaction = {
	emoji:str
	message:message
	sender:member
}

// internal functions
let parseUserData = [data:map[str, str]] -> member{

	return {
		id: data
		      |> <getValue "id">
		      |> <default "">
		name: data
				|> <getValue "username">
				|> <default "">
		icon: data
				|> <getValue "avatar">
				|> <default "">
		bot: (data
			    |> <getValue "bot">
				|> <default "false">) == "true"

	}
}

// public functions
let pub start = [k:str] -> () {
	var key = k
	let header: map[str, str] = <mapFrom [
		("Content-Type", "application/json"),
		("Authorization", "Bot " + key)
	]>
	// other important functions idk what is going to happen here
}

let pub getKey = [] -> str{
	return key
}

let pub getSelf = [] -> (bool, member) {
	print "uauauau"
	let r = <request.get "https://discord.com/api/users/@me" header>
	print "uauauau"
	if r.code /= 200{
		return (false, {
			id:""
			name:""
			icon:""
			bot:false
//			status:offline
//			customStatus:null
		})
	}

	return (true, <parseUserData r.return>)


}