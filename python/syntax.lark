start: (instruction ((";" | "\n") instruction)*)

instruction: declare (";")?
           | print (";")?
           | function_callback (";")?
           | function_callback_quirky (";")?
           | function_callback_quirky_pipe (";")?
           | for (";")?
           | imp (";")?
           | return (";")?
           | imported_command (";")?
           | if (";")?
           | ifelse (";")?
           | vary (";")?
           | enum_definition (";")?

non_infix_boolval: value
                 | function_callback
                 | function_callback_quirky
                 | function_callback_quirky_pipe

// functions
vary: "var " NAME "=" (expression | function_def | anonymous_func)
declare: "let " modifier? name_type "=" (expression | function_def | anonymous_func)
enum_definition: "type" NAME "=" enum_constructors
print: "print" value
function_callback: "<" (function_call | anonymous_function_call) ">"
function_callback_quirky: value ".<" (function_call | anonymous_function_call) ">"
function_callback_quirky_pipe: value "\n" "|>" "<" (function_call | anonymous_function_call) ">"
for: "for" name_type NUMBER code_block
imp: "import" NAME
impn: "imp" NAME
return: "return" expression
imported_command: "<" NAME "?" NAME (" " [value (" " value)*])? ">"
if: "if" condition ("{"? value "}"? | "{"? instruction "}"? | code_block)
ifelse: "if" condition ("{"? value "}"? | "{"? instruction "}"? | code_block) "else" ("{"? instruction "}"? | code_block)
ifelse_expr: "if" condition "{"? expression "}"? "else" "{"? expression "}"?
?condition: expression
          | conditional_let
conditional_let: "let" cond_pattern "=" (expression | function_def | anonymous_func)

//helpers
name_type: definite_pattern [":" types]
function_dec_call: NAME (" " [name_type (" " name_type)*])?
function_call : value (" " value)*
anonymous_function_call : anonymous_func (" " value)*
code_block: "{" instruction* "}"
function_def: arguments ["->" types] code_block
arguments: "[" generic_declaration? (name_type (" " name_type)*)? "]"
generic_declaration: "[" (NAME ",")* NAME "]"
anonymous_func: "(" arguments "->" NAME ":" (instruction (";" instruction)*) ")"
char: "\\" ( escape_code | "{" /./ "}")
escape_code: /[tnr]/
tupledef: "(" types ("," types)* ")"
listdef: LIST "[" types "]"
tupleval: "(" value ("," value)* ")"
listval: "[" (value ("," value)*)? "]"
recordval: "{" (record_entry (";" | "\n"))* record_entry (";" | "\n")? "}"
record_access: NAME "." NAME
enum_constructors: enum_constructor ("|" enum_constructor)*
enum_constructor: NAME types*

?modifier: PUBLIC

?record_entry: NAME ":" expression
             | NAME

?any_pattern: definite_pattern_value
            | cond_pattern

?definite_pattern: definite_pattern_value
                 | tuple_pattern
?definite_pattern_value: NAME
                       | "_"
                       | "(" definite_pattern ")"
                       | record_pattern
tuple_pattern: (definite_pattern_value ",")+ definite_pattern_value
record_pattern: "{" (record_entry_pattern (";" | "\n"))* record_entry_pattern "}"
?record_entry_pattern: NAME
                     | NAME ":" definite_pattern

?cond_pattern: list_pattern
  | enum_pattern
list_pattern: "[" (any_pattern ("," any_pattern)*)? "]"
enum_pattern: NAME any_pattern*

// Boolean and number expressions, with order of operations.
// Question mark "inlines" the branch, so we don't get nested
// boolean_expression(or_expression(and_expression etc)).
// Square brackets mean that the stuff inside it can appear 0 or 1 time. Same as
// (whatever)?

?types: NAME
      | tupledef
      | listdef

?expression: ifelse_expr
           | boolean_expression
           | imported_command

?boolean_expression: or_expression
?or_expression: [or_expression OR] and_expression
?and_expression: [and_expression AND] not_expression
?not_expression: compare_expression
               | NOT not_expression
?compare_expression: [compare_expression compare_operator] number_expression
?compare_operator: EQUALS
                 | GORE
                 | LORE
                 | LESS
                 | GREATER
                 | NEQUALS

?number_expression: sum_expression
?sum_expression: [sum_expression (ADD | SUBTRACT)] product_expression
?product_expression: [product_expression (MULTIPLY | DIVIDE | ROUNDDIV | MODULO)] exponent_expression
// Exponentiation right to left associative
?exponent_expression: unary_expression [EXPONENT exponent_expression]
?unary_expression: value
                 | SUBTRACT unary_expression
value: NUMBER
     | BOOLEAN
     | STRING
     | NAME
     | "(" expression ")"
     | function_callback
     | function_callback_quirky
     | function_callback_quirky_pipe
     | char
     | tupleval
     | listval
     | recordval
     | impn
     | record_access

//constants
BOOLEAN: ("true" | "false")
COMMENT: "//" /[^\n]/*
OR: ("||" | "|")
AND: ("&&" | "&")
EQUALS: ("==" | "=")
GORE: ">="
LORE: "<="
LESS: "<"
GREATER: ">"
NEQUALS: ("/=" | "!=")
NOT: ("~" | "!")
ADD: "+"
SUBTRACT: "-"
MULTIPLY: "*"
DIVIDE: "/"
ROUNDDIV: "//"
MODULO: "%"
EXPONENT: "^"
LIST: "list"
PUBLIC: "pub"
%import common.ESCAPED_STRING -> STRING
%import common.SIGNED_NUMBER  -> NUMBER
%import common.CNAME  -> NAME
%import common.WS
%ignore WS
%ignore COMMENT
