// Single line comment

/*
  Multi-line comments
  /* can be nested! */
  EDGE CASE: Multiline comments between operators
*/

let pub char1: char = \n
let char2: char = \{a}
let char3: char = \u{00b7}

let int1: int = 10100342349234590
let float1: float = 10
let float2: float = 3.141592

let string: str = "hello\n\{a}\u{00b7}"

let boolean: bool = true

let unit: () = ()

let name = char3

let or1 = false | boolean
let or2 = false || false
let or3 = 10 | 9 // 0b1010 | 0b1001 = 0b1011 = 11

let and1 = boolean & false
let and2 = true && true
let and3 = 10 & 9 // 0b1010 & 0b1001 = 0b1000 = 8

let add1 = 2 + 2
let add2 = 0.1 + 0.2
let add3 = "hello" + "wow"
let add4 = \{a} + \{b}
let add5 = "hell" + \{o}
let add6 = [1, 2, 3] + [4, 5, 6] // EDGE CASE: Adding empty lists

let subNegate1 = 2--3
let subNegate2 = -0.3-0.2

let mult1 = 2 * 3
let mult2 = 2 * 6.4

let div1: int = -1 / 0
let div2: float = 0 / 0

let exponent1 = 2 ^ -1
let exponent2 = 0.5 ^ 0.5

let pemdas = 3 - 2 - 4 / 3 * 2 + 4 ^ -2

let not1 = not or2 & and2
let not2 = ~or3 & and3

let comp = 3 < 4 <= 5 /= 6 > 0 >= -2.3 = -2.3

let ifElse = if comp { 3.2 } else { 4 }

let func: int -> int -> int = [a: int b: int] -> int {
  return a + b
}
let genericFunc: [t] t -> t = [[v] value: v] -> v {
  return value
}

let call1 = print(3) // EDGE CASE: Parentheses on a new line
let call2 = 3 |> print

let fizzbuzz1 = imp fizzbuzz
let fizzbuzz2 = imp "./fizzbuzz.n"

let tuple: float, str, char = 1, "two", \{3}

let list: list[(int, float)] = [(1, 0.1), (2, 0.2), (3, 0.3)]

let record1: { name: str; age: int } = {
  name: "Billia"
  age: 18
}
let record2: {
  age: int
  name: str
} = { name: "Billy"; age: 30 }

let recordAccess = (record2).age

let await = record2!.age!(3, 4) // Should not be syntax error but rather type checking error

{
  let codeblock = "wow"
  print(codeblock)
}

import json

for i 3 {
  print(i)
}

for (item in [1, 2, 3]) {
  print(item)
}
for (i in range(0, 3, 1)) {
  print(i)
}

var char1 = \t

type pub enum1[fff, ggg] =
  | variant1
  | <variant2 fff, ggg>

if not1 {
  let i = 3
  print(3)
} else if let <variant1 [a, b] c> = variant2([1, 2], "3") {
  print((a, b, c))
}

alias pub alias1[dfg] = enum1[int, dfg]

class pub class1 [arg1: int arg2: str] {
  print("hello")
  let private1 = 3
  let pub public1 = 4
}
