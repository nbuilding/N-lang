const lines: Record<
  string,
  (name: string, require: (name: string) => string) => string[]
> = {
  modulo: name => [
    `function ${name}(a, b) {`,
    '  return ((a % b) + b) % b;',
    '}',
  ],

  assertValue: name => [
    `function ${name}(valueAssertionId, pass) {`,
    '  valueAssertionResults_n[valueAssertionId] = pass;',
    '}',
  ],

  deepEqual: name => [
    `function ${name}(a, b) {`,
    '  if (typeof a === "object") {',
    '    // Array.isArray: IE9+',
    '    if (Array.isArray(a)) {',
    '      if (a.length !== b.length) {',
    '        return false;',
    '      }',
    '      for (var i = 0; i < a.length; i++) {',
    `        if (!${name}(a[i], b[i])) {`,
    '          return false;',
    '        }',
    '      }',
    '    } else {',
    '      // Object.keys: IE9+',
    '      var keys = Object.keys(a);',
    '      if (keys.length !== Object.keys(b).length) {',
    '        return false;',
    '      }',
    '      for (var i = 0; i < keys.length; i++) {',
    '        if (keys[i] in b) {',
    `          if (!${name}(a[keys[i]], b[keys[i]])) {`,
    '            return false;',
    '          }',
    '        } else {',
    '          return false;',
    '        }',
    '      }',
    '    }',
    '    return true;',
    '  } else {',
    '    return a === b;',
    '  }',
    '}',
  ],

  jsonValueToJs: name => [
    `function ${name}(value) {`,
    '  switch (value[0]) {',
    '    case 0:',
    '      return null',
    '    case 1:',
    '    case 2:',
    '    case 3:',
    '      return value[1]',
    '    case 4:',
    `      return value[1].map(v => ${name}(v))`,
    '    default:',
    `      return Object.fromEntries(Object.entries(value[1]).map(v => [v[0], ${name}(v[1])]))`,
    '  }',
    '}',
  ],

  jsValueToJson: name => [
    `function ${name}(value) {`,
    '  if (!value) return [0, null]',
    `  if (Array.isArray(value)) return [4, value.map(v => ${name}(v))]`,
    '  switch (typeof value) {',
    '    case "string":',
    '      return [1, value]',
    '    case "number":',
    '      return [2, value]',
    '    case "boolean":',
    '      return [3, value]',
    '    default:',
    `      return [5, Object.fromEntries(Object.entries(value[1]).map(v => [v[0], ${name}(v[1])]))]`,
    '  }',
    '}',
  ],

  unit: name => [`var ${name} = {};`],

  httpRequest: name => [
    `function ${name}(url, method, headers, bodyJson, returnJson, callback) {`,
    '  var body = bodyJson === undefined ? undefined : JSON.stringify(bodyJson);',
    '  if (typeof fetch === "function") {',
    '    fetch(url, {',
    '      method: method,',
    '      headers: headers,',
    '      body: JSON.stringify(body),',
    '    })',
    '      .then(function (response) {',
    '        if (returnJson) {',
    '          return response',
    '            .json()',
    '            .then(function (json) {',
    '              callback({',
    '                a: response.status,',
    '                b: response.statusText,',
    '                c: jsValueToJson(json),',
    '              });',
    '            })',
    '            .catch(function () {',
    '              callback({',
    '                a: response.status,',
    '                b: response.statusText,',
    '              });',
    '            });',
    '        } else {',
    '          return response.text().then(function (text) {',
    '            callback({',
    '              a: response.status,',
    '              b: response.statusText,',
    '              c: text,',
    '            });',
    '          });',
    '        }',
    '      })',
    '      .catch(function () {',
    '        callback({',
    '          a: 0,',
    '          b: "",',
    '          c: returnJson ? undefined : "",',
    '        });',
    '      });',
    '  } else if (typeof XMLHttpRequest === "function") {',
    '    var request = new XMLHttpRequest();',
    '    request.onreadystatechange = function () {',
    '      if (request.readyState === XMLHttpRequest.DONE) {',
    '        var parsed = request.responseText;',
    '        if (returnJson) {',
    '          try {',
    '            parsed = jsValueToJson(JSON.parse(parsed));',
    '          } catch (_) {}',
    '        }',
    '        callback({',
    '          a: response.status,',
    '          b: response.statusText,',
    '          c: parsed,',
    '        });',
    '      }',
    '    };',
    '    request.open("POST", url);',
    '    for (var key in headers) {',
    '      if (Object.prototype.hasOwnProperty.call(headers, key)) {',
    '        request.setRequestHeader(key, headers[key]);',
    '      }',
    '    }',
    '    request.send(body);',
    '  } else if (typeof require === "function") {',
    '    try {',
    '      var parsedUrl = new (require("url").URL)(url);',
    '      var http =',
    '        parsedUrl.protocol === "https:" ? require("https") : require("http");',
    '      var request = http.request(parsedUrl, { headers }, function (response) {',
    '        response.setEncoding("utf8");',
    '',
    '        var responseText = "";',
    '        response.on("data", function (data) {',
    '          responseText += data;',
    '        });',
    '        response.on("end", function () {',
    '          var parsed = responseText;',
    '          if (returnJson) {',
    '            try {',
    '              parsed = jsValueToJson(JSON.parse(parsed));',
    '            } catch (_) {}',
    '          }',
    '          callback({',
    '            a: response.status,',
    '            b: response.statusText,',
    '            c: parsed,',
    '          });',
    '        });',
    '        response.on("error", function () {',
    '          callback({ a: 0, b: "", c: returnJson ? undefined : "" });',
    '        });',
    '      });',
    '      if (body !== undefined) {',
    '        request.write(body);',
    '      }',
    '      request.end();',
    '    } catch (_) {',
    '      callback({ a: 0, b: "", c: returnJson ? undefined : "" });',
    '    }',
    '  } else {',
    '    callback({ a: 0, b: "", c: returnJson ? undefined : "" });',
    '  }',
    '}',
  ],
}

export default lines
