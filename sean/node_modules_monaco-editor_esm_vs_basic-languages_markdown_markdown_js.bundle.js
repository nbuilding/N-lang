"use strict";
(self["webpackChunkn_lang_editor"] = self["webpackChunkn_lang_editor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_markdown_markdown_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js":
/*!********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conf": () => (/* binding */ conf),
/* harmony export */   "language": () => (/* binding */ language)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var conf = {
    comments: {
        blockComment: ['<!--', '-->']
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '<', close: '>', notIn: ['string'] }
    ],
    surroundingPairs: [
        { open: '(', close: ')' },
        { open: '[', close: ']' },
        { open: '`', close: '`' }
    ],
    folding: {
        markers: {
            start: new RegExp('^\\s*<!--\\s*#?region\\b.*-->'),
            end: new RegExp('^\\s*<!--\\s*#?endregion\\b.*-->')
        }
    }
};
var language = {
    defaultToken: '',
    tokenPostfix: '.md',
    // escape codes
    control: /[\\`*_\[\]{}()#+\-\.!]/,
    noncontrol: /[^\\`*_\[\]{}()#+\-\.!]/,
    escapes: /\\(?:@control)/,
    // escape codes for javascript/CSS strings
    jsescapes: /\\(?:[btnfr\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,
    // non matched elements
    empty: [
        'area',
        'base',
        'basefont',
        'br',
        'col',
        'frame',
        'hr',
        'img',
        'input',
        'isindex',
        'link',
        'meta',
        'param'
    ],
    tokenizer: {
        root: [
            // markdown tables
            [/^\s*\|/, '@rematch', '@table_header'],
            // headers (with #)
            [
                /^(\s{0,3})(#+)((?:[^\\#]|@escapes)+)((?:#+)?)/,
                ['white', 'keyword', 'keyword', 'keyword']
            ],
            // headers (with =)
            [/^\s*(=+|\-+)\s*$/, 'keyword'],
            // headers (with ***)
            [/^\s*((\*[ ]?)+)\s*$/, 'meta.separator'],
            // quote
            [/^\s*>+/, 'comment'],
            // list (starting with * or number)
            [/^\s*([\*\-+:]|\d+\.)\s/, 'keyword'],
            // code block (4 spaces indent)
            [/^(\t|[ ]{4})[^ ].*$/, 'string'],
            // code block (3 tilde)
            [/^\s*~~~\s*((?:\w|[\/\-#])+)?\s*$/, { token: 'string', next: '@codeblock' }],
            // github style code blocks (with backticks and language)
            [
                /^\s*```\s*((?:\w|[\/\-#])+).*$/,
                { token: 'string', next: '@codeblockgh', nextEmbedded: '$1' }
            ],
            // github style code blocks (with backticks but no language)
            [/^\s*```\s*$/, { token: 'string', next: '@codeblock' }],
            // markup within lines
            { include: '@linecontent' }
        ],
        table_header: [
            { include: '@table_common' },
            [/[^\|]+/, 'keyword.table.header'] // table header
        ],
        table_body: [{ include: '@table_common' }, { include: '@linecontent' }],
        table_common: [
            [/\s*[\-:]+\s*/, { token: 'keyword', switchTo: 'table_body' }],
            [/^\s*\|/, 'keyword.table.left'],
            [/^\s*[^\|]/, '@rematch', '@pop'],
            [/^\s*$/, '@rematch', '@pop'],
            [
                /\|/,
                {
                    cases: {
                        '@eos': 'keyword.table.right',
                        '@default': 'keyword.table.middle' // inner |
                    }
                }
            ]
        ],
        codeblock: [
            [/^\s*~~~\s*$/, { token: 'string', next: '@pop' }],
            [/^\s*```\s*$/, { token: 'string', next: '@pop' }],
            [/.*$/, 'variable.source']
        ],
        // github style code blocks
        codeblockgh: [
            [/```\s*$/, { token: 'variable.source', next: '@pop', nextEmbedded: '@pop' }],
            [/[^`]+/, 'variable.source']
        ],
        linecontent: [
            // escapes
            [/&\w+;/, 'string.escape'],
            [/@escapes/, 'escape'],
            // various markup
            [/\b__([^\\_]|@escapes|_(?!_))+__\b/, 'strong'],
            [/\*\*([^\\*]|@escapes|\*(?!\*))+\*\*/, 'strong'],
            [/\b_[^_]+_\b/, 'emphasis'],
            [/\*([^\\*]|@escapes)+\*/, 'emphasis'],
            [/`([^\\`]|@escapes)+`/, 'variable'],
            // links
            [/\{+[^}]+\}+/, 'string.target'],
            [/(!?\[)((?:[^\]\\]|@escapes)*)(\]\([^\)]+\))/, ['string.link', '', 'string.link']],
            [/(!?\[)((?:[^\]\\]|@escapes)*)(\])/, 'string.link'],
            // or html
            { include: 'html' }
        ],
        // Note: it is tempting to rather switch to the real HTML mode instead of building our own here
        // but currently there is a limitation in Monarch that prevents us from doing it: The opening
        // '<' would start the HTML mode, however there is no way to jump 1 character back to let the
        // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,
        // we cannot correctly tokenize it in that mode yet.
        html: [
            // html tags
            [/<(\w+)\/>/, 'tag'],
            [
                /<(\w+)/,
                {
                    cases: {
                        '@empty': { token: 'tag', next: '@tag.$1' },
                        '@default': { token: 'tag', next: '@tag.$1' }
                    }
                }
            ],
            [/<\/(\w+)\s*>/, { token: 'tag' }],
            [/<!--/, 'comment', '@comment']
        ],
        comment: [
            [/[^<\-]+/, 'comment.content'],
            [/-->/, 'comment', '@pop'],
            [/<!--/, 'comment.content.invalid'],
            [/[<\-]/, 'comment.content']
        ],
        // Almost full HTML tag matching, complete with embedded scripts & styles
        tag: [
            [/[ \t\r\n]+/, 'white'],
            [
                /(type)(\s*=\s*)(")([^"]+)(")/,
                [
                    'attribute.name.html',
                    'delimiter.html',
                    'string.html',
                    { token: 'string.html', switchTo: '@tag.$S2.$4' },
                    'string.html'
                ]
            ],
            [
                /(type)(\s*=\s*)(')([^']+)(')/,
                [
                    'attribute.name.html',
                    'delimiter.html',
                    'string.html',
                    { token: 'string.html', switchTo: '@tag.$S2.$4' },
                    'string.html'
                ]
            ],
            [
                /(\w+)(\s*=\s*)("[^"]*"|'[^']*')/,
                ['attribute.name.html', 'delimiter.html', 'string.html']
            ],
            [/\w+/, 'attribute.name.html'],
            [/\/>/, 'tag', '@pop'],
            [
                />/,
                {
                    cases: {
                        '$S2==style': {
                            token: 'tag',
                            switchTo: 'embeddedStyle',
                            nextEmbedded: 'text/css'
                        },
                        '$S2==script': {
                            cases: {
                                $S3: {
                                    token: 'tag',
                                    switchTo: 'embeddedScript',
                                    nextEmbedded: '$S3'
                                },
                                '@default': {
                                    token: 'tag',
                                    switchTo: 'embeddedScript',
                                    nextEmbedded: 'text/javascript'
                                }
                            }
                        },
                        '@default': { token: 'tag', next: '@pop' }
                    }
                }
            ]
        ],
        embeddedStyle: [
            [/[^<]+/, ''],
            [/<\/style\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
            [/</, '']
        ],
        embeddedScript: [
            [/[^<]+/, ''],
            [/<\/script\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
            [/</, '']
        ]
    }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX21vbmFjby1lZGl0b3JfZXNtX3ZzX2Jhc2ljLWxhbmd1YWdlc19tYXJrZG93bl9tYXJrZG93bl9qcy5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVcsS0FBSztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUSxZQUFZLEdBQUc7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0Esd0RBQXdELEVBQUU7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsSUFBSTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekI7QUFDQSxtREFBbUQscUNBQXFDO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsOEJBQThCLHFDQUFxQztBQUNuRTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYywwQkFBMEI7QUFDeEM7QUFDQTtBQUNBLHVCQUF1QiwwQkFBMEIsSUFBSSx5QkFBeUI7QUFDOUU7QUFDQSwrQkFBK0IsMENBQTBDO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsK0JBQStCO0FBQzdELDhCQUE4QiwrQkFBK0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOERBQThEO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsSUFBSSxJQUFJO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywrQkFBK0I7QUFDbkUsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixjQUFjO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsK0NBQStDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwrQ0FBK0M7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsdURBQXVEO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHVEQUF1RDtBQUN2RjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL24tbGFuZy1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL21hcmtkb3duL21hcmtkb3duLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IHZhciBjb25mID0ge1xuICAgIGNvbW1lbnRzOiB7XG4gICAgICAgIGJsb2NrQ29tbWVudDogWyc8IS0tJywgJy0tPiddXG4gICAgfSxcbiAgICBicmFja2V0czogW1xuICAgICAgICBbJ3snLCAnfSddLFxuICAgICAgICBbJ1snLCAnXSddLFxuICAgICAgICBbJygnLCAnKSddXG4gICAgXSxcbiAgICBhdXRvQ2xvc2luZ1BhaXJzOiBbXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXG4gICAgICAgIHsgb3BlbjogJzwnLCBjbG9zZTogJz4nLCBub3RJbjogWydzdHJpbmcnXSB9XG4gICAgXSxcbiAgICBzdXJyb3VuZGluZ1BhaXJzOiBbXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXG4gICAgICAgIHsgb3BlbjogJ2AnLCBjbG9zZTogJ2AnIH1cbiAgICBdLFxuICAgIGZvbGRpbmc6IHtcbiAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgc3RhcnQ6IG5ldyBSZWdFeHAoJ15cXFxccyo8IS0tXFxcXHMqIz9yZWdpb25cXFxcYi4qLS0+JyksXG4gICAgICAgICAgICBlbmQ6IG5ldyBSZWdFeHAoJ15cXFxccyo8IS0tXFxcXHMqIz9lbmRyZWdpb25cXFxcYi4qLS0+JylcbiAgICAgICAgfVxuICAgIH1cbn07XG5leHBvcnQgdmFyIGxhbmd1YWdlID0ge1xuICAgIGRlZmF1bHRUb2tlbjogJycsXG4gICAgdG9rZW5Qb3N0Zml4OiAnLm1kJyxcbiAgICAvLyBlc2NhcGUgY29kZXNcbiAgICBjb250cm9sOiAvW1xcXFxgKl9cXFtcXF17fSgpIytcXC1cXC4hXS8sXG4gICAgbm9uY29udHJvbDogL1teXFxcXGAqX1xcW1xcXXt9KCkjK1xcLVxcLiFdLyxcbiAgICBlc2NhcGVzOiAvXFxcXCg/OkBjb250cm9sKS8sXG4gICAgLy8gZXNjYXBlIGNvZGVzIGZvciBqYXZhc2NyaXB0L0NTUyBzdHJpbmdzXG4gICAganNlc2NhcGVzOiAvXFxcXCg/OltidG5mclxcXFxcIiddfFswLTddWzAtN10/fFswLTNdWzAtN117Mn0pLyxcbiAgICAvLyBub24gbWF0Y2hlZCBlbGVtZW50c1xuICAgIGVtcHR5OiBbXG4gICAgICAgICdhcmVhJyxcbiAgICAgICAgJ2Jhc2UnLFxuICAgICAgICAnYmFzZWZvbnQnLFxuICAgICAgICAnYnInLFxuICAgICAgICAnY29sJyxcbiAgICAgICAgJ2ZyYW1lJyxcbiAgICAgICAgJ2hyJyxcbiAgICAgICAgJ2ltZycsXG4gICAgICAgICdpbnB1dCcsXG4gICAgICAgICdpc2luZGV4JyxcbiAgICAgICAgJ2xpbmsnLFxuICAgICAgICAnbWV0YScsXG4gICAgICAgICdwYXJhbSdcbiAgICBdLFxuICAgIHRva2VuaXplcjoge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICAvLyBtYXJrZG93biB0YWJsZXNcbiAgICAgICAgICAgIFsvXlxccypcXHwvLCAnQHJlbWF0Y2gnLCAnQHRhYmxlX2hlYWRlciddLFxuICAgICAgICAgICAgLy8gaGVhZGVycyAod2l0aCAjKVxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC9eKFxcc3swLDN9KSgjKykoKD86W15cXFxcI118QGVzY2FwZXMpKykoKD86IyspPykvLFxuICAgICAgICAgICAgICAgIFsnd2hpdGUnLCAna2V5d29yZCcsICdrZXl3b3JkJywgJ2tleXdvcmQnXVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIC8vIGhlYWRlcnMgKHdpdGggPSlcbiAgICAgICAgICAgIFsvXlxccyooPSt8XFwtKylcXHMqJC8sICdrZXl3b3JkJ10sXG4gICAgICAgICAgICAvLyBoZWFkZXJzICh3aXRoICoqKilcbiAgICAgICAgICAgIFsvXlxccyooKFxcKlsgXT8pKylcXHMqJC8sICdtZXRhLnNlcGFyYXRvciddLFxuICAgICAgICAgICAgLy8gcXVvdGVcbiAgICAgICAgICAgIFsvXlxccyo+Ky8sICdjb21tZW50J10sXG4gICAgICAgICAgICAvLyBsaXN0IChzdGFydGluZyB3aXRoICogb3IgbnVtYmVyKVxuICAgICAgICAgICAgWy9eXFxzKihbXFwqXFwtKzpdfFxcZCtcXC4pXFxzLywgJ2tleXdvcmQnXSxcbiAgICAgICAgICAgIC8vIGNvZGUgYmxvY2sgKDQgc3BhY2VzIGluZGVudClcbiAgICAgICAgICAgIFsvXihcXHR8WyBdezR9KVteIF0uKiQvLCAnc3RyaW5nJ10sXG4gICAgICAgICAgICAvLyBjb2RlIGJsb2NrICgzIHRpbGRlKVxuICAgICAgICAgICAgWy9eXFxzKn5+flxccyooKD86XFx3fFtcXC9cXC0jXSkrKT9cXHMqJC8sIHsgdG9rZW46ICdzdHJpbmcnLCBuZXh0OiAnQGNvZGVibG9jaycgfV0sXG4gICAgICAgICAgICAvLyBnaXRodWIgc3R5bGUgY29kZSBibG9ja3MgKHdpdGggYmFja3RpY2tzIGFuZCBsYW5ndWFnZSlcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAvXlxccypgYGBcXHMqKCg/Olxcd3xbXFwvXFwtI10pKykuKiQvLFxuICAgICAgICAgICAgICAgIHsgdG9rZW46ICdzdHJpbmcnLCBuZXh0OiAnQGNvZGVibG9ja2doJywgbmV4dEVtYmVkZGVkOiAnJDEnIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAvLyBnaXRodWIgc3R5bGUgY29kZSBibG9ja3MgKHdpdGggYmFja3RpY2tzIGJ1dCBubyBsYW5ndWFnZSlcbiAgICAgICAgICAgIFsvXlxccypgYGBcXHMqJC8sIHsgdG9rZW46ICdzdHJpbmcnLCBuZXh0OiAnQGNvZGVibG9jaycgfV0sXG4gICAgICAgICAgICAvLyBtYXJrdXAgd2l0aGluIGxpbmVzXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAbGluZWNvbnRlbnQnIH1cbiAgICAgICAgXSxcbiAgICAgICAgdGFibGVfaGVhZGVyOiBbXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAdGFibGVfY29tbW9uJyB9LFxuICAgICAgICAgICAgWy9bXlxcfF0rLywgJ2tleXdvcmQudGFibGUuaGVhZGVyJ10gLy8gdGFibGUgaGVhZGVyXG4gICAgICAgIF0sXG4gICAgICAgIHRhYmxlX2JvZHk6IFt7IGluY2x1ZGU6ICdAdGFibGVfY29tbW9uJyB9LCB7IGluY2x1ZGU6ICdAbGluZWNvbnRlbnQnIH1dLFxuICAgICAgICB0YWJsZV9jb21tb246IFtcbiAgICAgICAgICAgIFsvXFxzKltcXC06XStcXHMqLywgeyB0b2tlbjogJ2tleXdvcmQnLCBzd2l0Y2hUbzogJ3RhYmxlX2JvZHknIH1dLFxuICAgICAgICAgICAgWy9eXFxzKlxcfC8sICdrZXl3b3JkLnRhYmxlLmxlZnQnXSxcbiAgICAgICAgICAgIFsvXlxccypbXlxcfF0vLCAnQHJlbWF0Y2gnLCAnQHBvcCddLFxuICAgICAgICAgICAgWy9eXFxzKiQvLCAnQHJlbWF0Y2gnLCAnQHBvcCddLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC9cXHwvLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZW9zJzogJ2tleXdvcmQudGFibGUucmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogJ2tleXdvcmQudGFibGUubWlkZGxlJyAvLyBpbm5lciB8XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIF0sXG4gICAgICAgIGNvZGVibG9jazogW1xuICAgICAgICAgICAgWy9eXFxzKn5+flxccyokLywgeyB0b2tlbjogJ3N0cmluZycsIG5leHQ6ICdAcG9wJyB9XSxcbiAgICAgICAgICAgIFsvXlxccypgYGBcXHMqJC8sIHsgdG9rZW46ICdzdHJpbmcnLCBuZXh0OiAnQHBvcCcgfV0sXG4gICAgICAgICAgICBbLy4qJC8sICd2YXJpYWJsZS5zb3VyY2UnXVxuICAgICAgICBdLFxuICAgICAgICAvLyBnaXRodWIgc3R5bGUgY29kZSBibG9ja3NcbiAgICAgICAgY29kZWJsb2NrZ2g6IFtcbiAgICAgICAgICAgIFsvYGBgXFxzKiQvLCB7IHRva2VuOiAndmFyaWFibGUuc291cmNlJywgbmV4dDogJ0Bwb3AnLCBuZXh0RW1iZWRkZWQ6ICdAcG9wJyB9XSxcbiAgICAgICAgICAgIFsvW15gXSsvLCAndmFyaWFibGUuc291cmNlJ11cbiAgICAgICAgXSxcbiAgICAgICAgbGluZWNvbnRlbnQ6IFtcbiAgICAgICAgICAgIC8vIGVzY2FwZXNcbiAgICAgICAgICAgIFsvJlxcdys7LywgJ3N0cmluZy5lc2NhcGUnXSxcbiAgICAgICAgICAgIFsvQGVzY2FwZXMvLCAnZXNjYXBlJ10sXG4gICAgICAgICAgICAvLyB2YXJpb3VzIG1hcmt1cFxuICAgICAgICAgICAgWy9cXGJfXyhbXlxcXFxfXXxAZXNjYXBlc3xfKD8hXykpK19fXFxiLywgJ3N0cm9uZyddLFxuICAgICAgICAgICAgWy9cXCpcXCooW15cXFxcKl18QGVzY2FwZXN8XFwqKD8hXFwqKSkrXFwqXFwqLywgJ3N0cm9uZyddLFxuICAgICAgICAgICAgWy9cXGJfW15fXStfXFxiLywgJ2VtcGhhc2lzJ10sXG4gICAgICAgICAgICBbL1xcKihbXlxcXFwqXXxAZXNjYXBlcykrXFwqLywgJ2VtcGhhc2lzJ10sXG4gICAgICAgICAgICBbL2AoW15cXFxcYF18QGVzY2FwZXMpK2AvLCAndmFyaWFibGUnXSxcbiAgICAgICAgICAgIC8vIGxpbmtzXG4gICAgICAgICAgICBbL1xceytbXn1dK1xcfSsvLCAnc3RyaW5nLnRhcmdldCddLFxuICAgICAgICAgICAgWy8oIT9cXFspKCg/OlteXFxdXFxcXF18QGVzY2FwZXMpKikoXFxdXFwoW15cXCldK1xcKSkvLCBbJ3N0cmluZy5saW5rJywgJycsICdzdHJpbmcubGluayddXSxcbiAgICAgICAgICAgIFsvKCE/XFxbKSgoPzpbXlxcXVxcXFxdfEBlc2NhcGVzKSopKFxcXSkvLCAnc3RyaW5nLmxpbmsnXSxcbiAgICAgICAgICAgIC8vIG9yIGh0bWxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ2h0bWwnIH1cbiAgICAgICAgXSxcbiAgICAgICAgLy8gTm90ZTogaXQgaXMgdGVtcHRpbmcgdG8gcmF0aGVyIHN3aXRjaCB0byB0aGUgcmVhbCBIVE1MIG1vZGUgaW5zdGVhZCBvZiBidWlsZGluZyBvdXIgb3duIGhlcmVcbiAgICAgICAgLy8gYnV0IGN1cnJlbnRseSB0aGVyZSBpcyBhIGxpbWl0YXRpb24gaW4gTW9uYXJjaCB0aGF0IHByZXZlbnRzIHVzIGZyb20gZG9pbmcgaXQ6IFRoZSBvcGVuaW5nXG4gICAgICAgIC8vICc8JyB3b3VsZCBzdGFydCB0aGUgSFRNTCBtb2RlLCBob3dldmVyIHRoZXJlIGlzIG5vIHdheSB0byBqdW1wIDEgY2hhcmFjdGVyIGJhY2sgdG8gbGV0IHRoZVxuICAgICAgICAvLyBIVE1MIG1vZGUgYWxzbyB0b2tlbml6ZSB0aGUgb3BlbmluZyBhbmdsZSBicmFja2V0LiBUaHVzLCBldmVuIHRob3VnaCB3ZSBjb3VsZCBqdW1wIHRvIEhUTUwsXG4gICAgICAgIC8vIHdlIGNhbm5vdCBjb3JyZWN0bHkgdG9rZW5pemUgaXQgaW4gdGhhdCBtb2RlIHlldC5cbiAgICAgICAgaHRtbDogW1xuICAgICAgICAgICAgLy8gaHRtbCB0YWdzXG4gICAgICAgICAgICBbLzwoXFx3KylcXC8+LywgJ3RhZyddLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC88KFxcdyspLyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQGVtcHR5JzogeyB0b2tlbjogJ3RhZycsIG5leHQ6ICdAdGFnLiQxJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogeyB0b2tlbjogJ3RhZycsIG5leHQ6ICdAdGFnLiQxJyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgWy88XFwvKFxcdyspXFxzKj4vLCB7IHRva2VuOiAndGFnJyB9XSxcbiAgICAgICAgICAgIFsvPCEtLS8sICdjb21tZW50JywgJ0Bjb21tZW50J11cbiAgICAgICAgXSxcbiAgICAgICAgY29tbWVudDogW1xuICAgICAgICAgICAgWy9bXjxcXC1dKy8sICdjb21tZW50LmNvbnRlbnQnXSxcbiAgICAgICAgICAgIFsvLS0+LywgJ2NvbW1lbnQnLCAnQHBvcCddLFxuICAgICAgICAgICAgWy88IS0tLywgJ2NvbW1lbnQuY29udGVudC5pbnZhbGlkJ10sXG4gICAgICAgICAgICBbL1s8XFwtXS8sICdjb21tZW50LmNvbnRlbnQnXVxuICAgICAgICBdLFxuICAgICAgICAvLyBBbG1vc3QgZnVsbCBIVE1MIHRhZyBtYXRjaGluZywgY29tcGxldGUgd2l0aCBlbWJlZGRlZCBzY3JpcHRzICYgc3R5bGVzXG4gICAgICAgIHRhZzogW1xuICAgICAgICAgICAgWy9bIFxcdFxcclxcbl0rLywgJ3doaXRlJ10sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgLyh0eXBlKShcXHMqPVxccyopKFwiKShbXlwiXSspKFwiKS8sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAnYXR0cmlidXRlLm5hbWUuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICdkZWxpbWl0ZXIuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICdzdHJpbmcuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIHsgdG9rZW46ICdzdHJpbmcuaHRtbCcsIHN3aXRjaFRvOiAnQHRhZy4kUzIuJDQnIH0sXG4gICAgICAgICAgICAgICAgICAgICdzdHJpbmcuaHRtbCdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC8odHlwZSkoXFxzKj1cXHMqKSgnKShbXiddKykoJykvLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgJ2F0dHJpYnV0ZS5uYW1lLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAnZGVsaW1pdGVyLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAnc3RyaW5nLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICB7IHRva2VuOiAnc3RyaW5nLmh0bWwnLCBzd2l0Y2hUbzogJ0B0YWcuJFMyLiQ0JyB9LFxuICAgICAgICAgICAgICAgICAgICAnc3RyaW5nLmh0bWwnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAvKFxcdyspKFxccyo9XFxzKikoXCJbXlwiXSpcInwnW14nXSonKS8sXG4gICAgICAgICAgICAgICAgWydhdHRyaWJ1dGUubmFtZS5odG1sJywgJ2RlbGltaXRlci5odG1sJywgJ3N0cmluZy5odG1sJ11cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbL1xcdysvLCAnYXR0cmlidXRlLm5hbWUuaHRtbCddLFxuICAgICAgICAgICAgWy9cXC8+LywgJ3RhZycsICdAcG9wJ10sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgLz4vLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICckUzI9PXN0eWxlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAndGFnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hUbzogJ2VtYmVkZGVkU3R5bGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRFbWJlZGRlZDogJ3RleHQvY3NzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICckUzI9PXNjcmlwdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUzM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAndGFnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaFRvOiAnZW1iZWRkZWRTY3JpcHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEVtYmVkZGVkOiAnJFMzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogJ3RhZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hUbzogJ2VtYmVkZGVkU2NyaXB0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRFbWJlZGRlZDogJ3RleHQvamF2YXNjcmlwdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiB7IHRva2VuOiAndGFnJywgbmV4dDogJ0Bwb3AnIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgXSxcbiAgICAgICAgZW1iZWRkZWRTdHlsZTogW1xuICAgICAgICAgICAgWy9bXjxdKy8sICcnXSxcbiAgICAgICAgICAgIFsvPFxcL3N0eWxlXFxzKj4vLCB7IHRva2VuOiAnQHJlbWF0Y2gnLCBuZXh0OiAnQHBvcCcsIG5leHRFbWJlZGRlZDogJ0Bwb3AnIH1dLFxuICAgICAgICAgICAgWy88LywgJyddXG4gICAgICAgIF0sXG4gICAgICAgIGVtYmVkZGVkU2NyaXB0OiBbXG4gICAgICAgICAgICBbL1tePF0rLywgJyddLFxuICAgICAgICAgICAgWy88XFwvc2NyaXB0XFxzKj4vLCB7IHRva2VuOiAnQHJlbWF0Y2gnLCBuZXh0OiAnQHBvcCcsIG5leHRFbWJlZGRlZDogJ0Bwb3AnIH1dLFxuICAgICAgICAgICAgWy88LywgJyddXG4gICAgICAgIF1cbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9