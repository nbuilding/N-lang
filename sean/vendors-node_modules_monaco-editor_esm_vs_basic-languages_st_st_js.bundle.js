"use strict";
(self["webpackChunkn_lang_editor"] = self["webpackChunkn_lang_editor"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_basic-languages_st_st_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/st/st.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/st/st.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conf": () => (/* binding */ conf),
/* harmony export */   "language": () => (/* binding */ language)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var conf = {
    comments: {
        lineComment: '//',
        blockComment: ['(*', '*)']
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')'],
        ['var', 'end_var'],
        ['var_input', 'end_var'],
        ['var_output', 'end_var'],
        ['var_in_out', 'end_var'],
        ['var_temp', 'end_var'],
        ['var_global', 'end_var'],
        ['var_access', 'end_var'],
        ['var_external', 'end_var'],
        ['type', 'end_type'],
        ['struct', 'end_struct'],
        ['program', 'end_program'],
        ['function', 'end_function'],
        ['function_block', 'end_function_block'],
        ['action', 'end_action'],
        ['step', 'end_step'],
        ['initial_step', 'end_step'],
        ['transaction', 'end_transaction'],
        ['configuration', 'end_configuration'],
        ['tcp', 'end_tcp'],
        ['recource', 'end_recource'],
        ['channel', 'end_channel'],
        ['library', 'end_library'],
        ['folder', 'end_folder'],
        ['binaries', 'end_binaries'],
        ['includes', 'end_includes'],
        ['sources', 'end_sources']
    ],
    autoClosingPairs: [
        { open: '[', close: ']' },
        { open: '{', close: '}' },
        { open: '(', close: ')' },
        { open: '/*', close: '*/' },
        { open: "'", close: "'", notIn: ['string_sq'] },
        { open: '"', close: '"', notIn: ['string_dq'] },
        { open: 'var_input', close: 'end_var' },
        { open: 'var_output', close: 'end_var' },
        { open: 'var_in_out', close: 'end_var' },
        { open: 'var_temp', close: 'end_var' },
        { open: 'var_global', close: 'end_var' },
        { open: 'var_access', close: 'end_var' },
        { open: 'var_external', close: 'end_var' },
        { open: 'type', close: 'end_type' },
        { open: 'struct', close: 'end_struct' },
        { open: 'program', close: 'end_program' },
        { open: 'function', close: 'end_function' },
        { open: 'function_block', close: 'end_function_block' },
        { open: 'action', close: 'end_action' },
        { open: 'step', close: 'end_step' },
        { open: 'initial_step', close: 'end_step' },
        { open: 'transaction', close: 'end_transaction' },
        { open: 'configuration', close: 'end_configuration' },
        { open: 'tcp', close: 'end_tcp' },
        { open: 'recource', close: 'end_recource' },
        { open: 'channel', close: 'end_channel' },
        { open: 'library', close: 'end_library' },
        { open: 'folder', close: 'end_folder' },
        { open: 'binaries', close: 'end_binaries' },
        { open: 'includes', close: 'end_includes' },
        { open: 'sources', close: 'end_sources' }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" },
        { open: 'var', close: 'end_var' },
        { open: 'var_input', close: 'end_var' },
        { open: 'var_output', close: 'end_var' },
        { open: 'var_in_out', close: 'end_var' },
        { open: 'var_temp', close: 'end_var' },
        { open: 'var_global', close: 'end_var' },
        { open: 'var_access', close: 'end_var' },
        { open: 'var_external', close: 'end_var' },
        { open: 'type', close: 'end_type' },
        { open: 'struct', close: 'end_struct' },
        { open: 'program', close: 'end_program' },
        { open: 'function', close: 'end_function' },
        { open: 'function_block', close: 'end_function_block' },
        { open: 'action', close: 'end_action' },
        { open: 'step', close: 'end_step' },
        { open: 'initial_step', close: 'end_step' },
        { open: 'transaction', close: 'end_transaction' },
        { open: 'configuration', close: 'end_configuration' },
        { open: 'tcp', close: 'end_tcp' },
        { open: 'recource', close: 'end_recource' },
        { open: 'channel', close: 'end_channel' },
        { open: 'library', close: 'end_library' },
        { open: 'folder', close: 'end_folder' },
        { open: 'binaries', close: 'end_binaries' },
        { open: 'includes', close: 'end_includes' },
        { open: 'sources', close: 'end_sources' }
    ],
    folding: {
        markers: {
            start: new RegExp('^\\s*#pragma\\s+region\\b'),
            end: new RegExp('^\\s*#pragma\\s+endregion\\b')
        }
    }
};
var language = {
    defaultToken: '',
    tokenPostfix: '.st',
    ignoreCase: true,
    brackets: [
        { token: 'delimiter.curly', open: '{', close: '}' },
        { token: 'delimiter.parenthesis', open: '(', close: ')' },
        { token: 'delimiter.square', open: '[', close: ']' }
    ],
    keywords: [
        'if',
        'end_if',
        'elsif',
        'else',
        'case',
        'of',
        'to',
        '__try',
        '__catch',
        '__finally',
        'do',
        'with',
        'by',
        'while',
        'repeat',
        'end_while',
        'end_repeat',
        'end_case',
        'for',
        'end_for',
        'task',
        'retain',
        'non_retain',
        'constant',
        'with',
        'at',
        'exit',
        'return',
        'interval',
        'priority',
        'address',
        'port',
        'on_channel',
        'then',
        'iec',
        'file',
        'uses',
        'version',
        'packagetype',
        'displayname',
        'copyright',
        'summary',
        'vendor',
        'common_source',
        'from',
        'extends'
    ],
    constant: ['false', 'true', 'null'],
    defineKeywords: [
        'var',
        'var_input',
        'var_output',
        'var_in_out',
        'var_temp',
        'var_global',
        'var_access',
        'var_external',
        'end_var',
        'type',
        'end_type',
        'struct',
        'end_struct',
        'program',
        'end_program',
        'function',
        'end_function',
        'function_block',
        'end_function_block',
        'interface',
        'end_interface',
        'method',
        'end_method',
        'property',
        'end_property',
        'namespace',
        'end_namespace',
        'configuration',
        'end_configuration',
        'tcp',
        'end_tcp',
        'resource',
        'end_resource',
        'channel',
        'end_channel',
        'library',
        'end_library',
        'folder',
        'end_folder',
        'binaries',
        'end_binaries',
        'includes',
        'end_includes',
        'sources',
        'end_sources',
        'action',
        'end_action',
        'step',
        'initial_step',
        'end_step',
        'transaction',
        'end_transaction'
    ],
    typeKeywords: [
        'int',
        'sint',
        'dint',
        'lint',
        'usint',
        'uint',
        'udint',
        'ulint',
        'real',
        'lreal',
        'time',
        'date',
        'time_of_day',
        'date_and_time',
        'string',
        'bool',
        'byte',
        'word',
        'dword',
        'array',
        'pointer',
        'lword'
    ],
    operators: [
        '=',
        '>',
        '<',
        ':',
        ':=',
        '<=',
        '>=',
        '<>',
        '&',
        '+',
        '-',
        '*',
        '**',
        'MOD',
        '^',
        'or',
        'and',
        'not',
        'xor',
        'abs',
        'acos',
        'asin',
        'atan',
        'cos',
        'exp',
        'expt',
        'ln',
        'log',
        'sin',
        'sqrt',
        'tan',
        'sel',
        'max',
        'min',
        'limit',
        'mux',
        'shl',
        'shr',
        'rol',
        'ror',
        'indexof',
        'sizeof',
        'adr',
        'adrinst',
        'bitadr',
        'is_valid',
        'ref',
        'ref_to'
    ],
    builtinVariables: [],
    builtinFunctions: [
        'sr',
        'rs',
        'tp',
        'ton',
        'tof',
        'eq',
        'ge',
        'le',
        'lt',
        'ne',
        'round',
        'trunc',
        'ctd',
        'сtu',
        'ctud',
        'r_trig',
        'f_trig',
        'move',
        'concat',
        'delete',
        'find',
        'insert',
        'left',
        'len',
        'replace',
        'right',
        'rtc'
    ],
    // we include these common regular expressions
    symbols: /[=><!~?:&|+\-*\/\^%]+/,
    // C# style strings
    escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
    // The main tokenizer for our languages
    tokenizer: {
        root: [
            [/(\.\.)/, 'delimiter'],
            [/\b(16#[0-9A-Fa-f\_]*)+\b/, 'number.hex'],
            [/\b(2#[01\_]+)+\b/, 'number.binary'],
            [/\b(8#[0-9\_]*)+\b/, 'number.octal'],
            [/\b\d*\.\d+([eE][\-+]?\d+)?\b/, 'number.float'],
            [/\b(L?REAL)#[0-9\_\.e]+\b/, 'number.float'],
            [/\b(BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT)#[0-9\_]+\b/, 'number'],
            [/\d+/, 'number'],
            [/\b(T|DT|TOD)#[0-9:-_shmyd]+\b/, 'tag'],
            [/\%(I|Q|M)(X|B|W|D|L)[0-9\.]+/, 'tag'],
            [/\%(I|Q|M)[0-9\.]*/, 'tag'],
            [/\b[A-Za-z]{1,6}#[0-9]+\b/, 'tag'],
            [/\b(TO_|CTU_|CTD_|CTUD_|MUX_|SEL_)[A_Za-z]+\b/, 'predefined'],
            [/\b[A_Za-z]+(_TO_)[A_Za-z]+\b/, 'predefined'],
            [/[;]/, 'delimiter'],
            [/[.]/, { token: 'delimiter', next: '@params' }],
            // identifiers and keywords
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@operators': 'operators',
                        '@keywords': 'keyword',
                        '@typeKeywords': 'type',
                        '@defineKeywords': 'variable',
                        '@constant': 'constant',
                        '@builtinVariables': 'predefined',
                        '@builtinFunctions': 'predefined',
                        '@default': 'identifier'
                    }
                }
            ],
            { include: '@whitespace' },
            [/[{}()\[\]]/, '@brackets'],
            [/"([^"\\]|\\.)*$/, 'string.invalid'],
            [/"/, { token: 'string.quote', bracket: '@open', next: '@string_dq' }],
            [/'/, { token: 'string.quote', bracket: '@open', next: '@string_sq' }],
            [/'[^\\']'/, 'string'],
            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
            [/'/, 'string.invalid']
        ],
        params: [
            [/\b[A-Za-z0-9_]+\b(?=\()/, { token: 'identifier', next: '@pop' }],
            [/\b[A-Za-z0-9_]+\b/, 'variable.name', '@pop']
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\/\*/, 'comment', '@push'],
            ['\\*/', 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        comment2: [
            [/[^\(*]+/, 'comment'],
            [/\(\*/, 'comment', '@push'],
            ['\\*\\)', 'comment', '@pop'],
            [/[\(*]/, 'comment']
        ],
        whitespace: [
            [/[ \t\r\n]+/, 'white'],
            [/\/\/.*$/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
            [/\(\*/, 'comment', '@comment2']
        ],
        string_dq: [
            [/[^\\"]+/, 'string'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            [/"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]
        ],
        string_sq: [
            [/[^\\']+/, 'string'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]
        ]
    }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfbW9uYWNvLWVkaXRvcl9lc21fdnNfYmFzaWMtbGFuZ3VhZ2VzX3N0X3N0X2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLEtBQUs7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSxRQUFRLFlBQVksR0FBRztBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHFEQUFxRDtBQUMvRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLCtDQUErQztBQUN6RCxVQUFVLG1EQUFtRDtBQUM3RCxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVUsUUFBUSxZQUFZLEdBQUc7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSwrQkFBK0I7QUFDekMsVUFBVSxxQ0FBcUM7QUFDL0MsVUFBVSxzQ0FBc0M7QUFDaEQsVUFBVSxzQ0FBc0M7QUFDaEQsVUFBVSxvQ0FBb0M7QUFDOUMsVUFBVSxzQ0FBc0M7QUFDaEQsVUFBVSxzQ0FBc0M7QUFDaEQsVUFBVSx3Q0FBd0M7QUFDbEQsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVSxxQ0FBcUM7QUFDL0MsVUFBVSx1Q0FBdUM7QUFDakQsVUFBVSx5Q0FBeUM7QUFDbkQsVUFBVSxxREFBcUQ7QUFDL0QsVUFBVSxxQ0FBcUM7QUFDL0MsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVSx5Q0FBeUM7QUFDbkQsVUFBVSwrQ0FBK0M7QUFDekQsVUFBVSxtREFBbUQ7QUFDN0QsVUFBVSwrQkFBK0I7QUFDekMsVUFBVSx5Q0FBeUM7QUFDbkQsVUFBVSx1Q0FBdUM7QUFDakQsVUFBVSx1Q0FBdUM7QUFDakQsVUFBVSxxQ0FBcUM7QUFDL0MsVUFBVSx5Q0FBeUM7QUFDbkQsVUFBVSx5Q0FBeUM7QUFDbkQsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxrQ0FBa0MsWUFBWSxHQUFHO0FBQzNELFVBQVUsdURBQXVEO0FBQ2pFLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxJQUFJLGNBQWMsRUFBRSxjQUFjLEVBQUU7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixJQUFJO0FBQzdCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsc0JBQXNCLHFDQUFxQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsd0JBQXdCO0FBQ3RDLGlCQUFpQjtBQUNqQjtBQUNBLG9CQUFvQiw2REFBNkQ7QUFDakYsb0JBQW9CLDZEQUE2RDtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLG1DQUFtQztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0RBQXdEO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0RBQXdEO0FBQzVFO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL24tbGFuZy1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL3N0L3N0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IHZhciBjb25mID0ge1xuICAgIGNvbW1lbnRzOiB7XG4gICAgICAgIGxpbmVDb21tZW50OiAnLy8nLFxuICAgICAgICBibG9ja0NvbW1lbnQ6IFsnKConLCAnKiknXVxuICAgIH0sXG4gICAgYnJhY2tldHM6IFtcbiAgICAgICAgWyd7JywgJ30nXSxcbiAgICAgICAgWydbJywgJ10nXSxcbiAgICAgICAgWycoJywgJyknXSxcbiAgICAgICAgWyd2YXInLCAnZW5kX3ZhciddLFxuICAgICAgICBbJ3Zhcl9pbnB1dCcsICdlbmRfdmFyJ10sXG4gICAgICAgIFsndmFyX291dHB1dCcsICdlbmRfdmFyJ10sXG4gICAgICAgIFsndmFyX2luX291dCcsICdlbmRfdmFyJ10sXG4gICAgICAgIFsndmFyX3RlbXAnLCAnZW5kX3ZhciddLFxuICAgICAgICBbJ3Zhcl9nbG9iYWwnLCAnZW5kX3ZhciddLFxuICAgICAgICBbJ3Zhcl9hY2Nlc3MnLCAnZW5kX3ZhciddLFxuICAgICAgICBbJ3Zhcl9leHRlcm5hbCcsICdlbmRfdmFyJ10sXG4gICAgICAgIFsndHlwZScsICdlbmRfdHlwZSddLFxuICAgICAgICBbJ3N0cnVjdCcsICdlbmRfc3RydWN0J10sXG4gICAgICAgIFsncHJvZ3JhbScsICdlbmRfcHJvZ3JhbSddLFxuICAgICAgICBbJ2Z1bmN0aW9uJywgJ2VuZF9mdW5jdGlvbiddLFxuICAgICAgICBbJ2Z1bmN0aW9uX2Jsb2NrJywgJ2VuZF9mdW5jdGlvbl9ibG9jayddLFxuICAgICAgICBbJ2FjdGlvbicsICdlbmRfYWN0aW9uJ10sXG4gICAgICAgIFsnc3RlcCcsICdlbmRfc3RlcCddLFxuICAgICAgICBbJ2luaXRpYWxfc3RlcCcsICdlbmRfc3RlcCddLFxuICAgICAgICBbJ3RyYW5zYWN0aW9uJywgJ2VuZF90cmFuc2FjdGlvbiddLFxuICAgICAgICBbJ2NvbmZpZ3VyYXRpb24nLCAnZW5kX2NvbmZpZ3VyYXRpb24nXSxcbiAgICAgICAgWyd0Y3AnLCAnZW5kX3RjcCddLFxuICAgICAgICBbJ3JlY291cmNlJywgJ2VuZF9yZWNvdXJjZSddLFxuICAgICAgICBbJ2NoYW5uZWwnLCAnZW5kX2NoYW5uZWwnXSxcbiAgICAgICAgWydsaWJyYXJ5JywgJ2VuZF9saWJyYXJ5J10sXG4gICAgICAgIFsnZm9sZGVyJywgJ2VuZF9mb2xkZXInXSxcbiAgICAgICAgWydiaW5hcmllcycsICdlbmRfYmluYXJpZXMnXSxcbiAgICAgICAgWydpbmNsdWRlcycsICdlbmRfaW5jbHVkZXMnXSxcbiAgICAgICAgWydzb3VyY2VzJywgJ2VuZF9zb3VyY2VzJ11cbiAgICBdLFxuICAgIGF1dG9DbG9zaW5nUGFpcnM6IFtcbiAgICAgICAgeyBvcGVuOiAnWycsIGNsb3NlOiAnXScgfSxcbiAgICAgICAgeyBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcbiAgICAgICAgeyBvcGVuOiAnKCcsIGNsb3NlOiAnKScgfSxcbiAgICAgICAgeyBvcGVuOiAnLyonLCBjbG9zZTogJyovJyB9LFxuICAgICAgICB7IG9wZW46IFwiJ1wiLCBjbG9zZTogXCInXCIsIG5vdEluOiBbJ3N0cmluZ19zcSddIH0sXG4gICAgICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicsIG5vdEluOiBbJ3N0cmluZ19kcSddIH0sXG4gICAgICAgIHsgb3BlbjogJ3Zhcl9pbnB1dCcsIGNsb3NlOiAnZW5kX3ZhcicgfSxcbiAgICAgICAgeyBvcGVuOiAndmFyX291dHB1dCcsIGNsb3NlOiAnZW5kX3ZhcicgfSxcbiAgICAgICAgeyBvcGVuOiAndmFyX2luX291dCcsIGNsb3NlOiAnZW5kX3ZhcicgfSxcbiAgICAgICAgeyBvcGVuOiAndmFyX3RlbXAnLCBjbG9zZTogJ2VuZF92YXInIH0sXG4gICAgICAgIHsgb3BlbjogJ3Zhcl9nbG9iYWwnLCBjbG9zZTogJ2VuZF92YXInIH0sXG4gICAgICAgIHsgb3BlbjogJ3Zhcl9hY2Nlc3MnLCBjbG9zZTogJ2VuZF92YXInIH0sXG4gICAgICAgIHsgb3BlbjogJ3Zhcl9leHRlcm5hbCcsIGNsb3NlOiAnZW5kX3ZhcicgfSxcbiAgICAgICAgeyBvcGVuOiAndHlwZScsIGNsb3NlOiAnZW5kX3R5cGUnIH0sXG4gICAgICAgIHsgb3BlbjogJ3N0cnVjdCcsIGNsb3NlOiAnZW5kX3N0cnVjdCcgfSxcbiAgICAgICAgeyBvcGVuOiAncHJvZ3JhbScsIGNsb3NlOiAnZW5kX3Byb2dyYW0nIH0sXG4gICAgICAgIHsgb3BlbjogJ2Z1bmN0aW9uJywgY2xvc2U6ICdlbmRfZnVuY3Rpb24nIH0sXG4gICAgICAgIHsgb3BlbjogJ2Z1bmN0aW9uX2Jsb2NrJywgY2xvc2U6ICdlbmRfZnVuY3Rpb25fYmxvY2snIH0sXG4gICAgICAgIHsgb3BlbjogJ2FjdGlvbicsIGNsb3NlOiAnZW5kX2FjdGlvbicgfSxcbiAgICAgICAgeyBvcGVuOiAnc3RlcCcsIGNsb3NlOiAnZW5kX3N0ZXAnIH0sXG4gICAgICAgIHsgb3BlbjogJ2luaXRpYWxfc3RlcCcsIGNsb3NlOiAnZW5kX3N0ZXAnIH0sXG4gICAgICAgIHsgb3BlbjogJ3RyYW5zYWN0aW9uJywgY2xvc2U6ICdlbmRfdHJhbnNhY3Rpb24nIH0sXG4gICAgICAgIHsgb3BlbjogJ2NvbmZpZ3VyYXRpb24nLCBjbG9zZTogJ2VuZF9jb25maWd1cmF0aW9uJyB9LFxuICAgICAgICB7IG9wZW46ICd0Y3AnLCBjbG9zZTogJ2VuZF90Y3AnIH0sXG4gICAgICAgIHsgb3BlbjogJ3JlY291cmNlJywgY2xvc2U6ICdlbmRfcmVjb3VyY2UnIH0sXG4gICAgICAgIHsgb3BlbjogJ2NoYW5uZWwnLCBjbG9zZTogJ2VuZF9jaGFubmVsJyB9LFxuICAgICAgICB7IG9wZW46ICdsaWJyYXJ5JywgY2xvc2U6ICdlbmRfbGlicmFyeScgfSxcbiAgICAgICAgeyBvcGVuOiAnZm9sZGVyJywgY2xvc2U6ICdlbmRfZm9sZGVyJyB9LFxuICAgICAgICB7IG9wZW46ICdiaW5hcmllcycsIGNsb3NlOiAnZW5kX2JpbmFyaWVzJyB9LFxuICAgICAgICB7IG9wZW46ICdpbmNsdWRlcycsIGNsb3NlOiAnZW5kX2luY2x1ZGVzJyB9LFxuICAgICAgICB7IG9wZW46ICdzb3VyY2VzJywgY2xvc2U6ICdlbmRfc291cmNlcycgfVxuICAgIF0sXG4gICAgc3Vycm91bmRpbmdQYWlyczogW1xuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJyB9LFxuICAgICAgICB7IG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxuICAgICAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH0sXG4gICAgICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiB9LFxuICAgICAgICB7IG9wZW46ICd2YXInLCBjbG9zZTogJ2VuZF92YXInIH0sXG4gICAgICAgIHsgb3BlbjogJ3Zhcl9pbnB1dCcsIGNsb3NlOiAnZW5kX3ZhcicgfSxcbiAgICAgICAgeyBvcGVuOiAndmFyX291dHB1dCcsIGNsb3NlOiAnZW5kX3ZhcicgfSxcbiAgICAgICAgeyBvcGVuOiAndmFyX2luX291dCcsIGNsb3NlOiAnZW5kX3ZhcicgfSxcbiAgICAgICAgeyBvcGVuOiAndmFyX3RlbXAnLCBjbG9zZTogJ2VuZF92YXInIH0sXG4gICAgICAgIHsgb3BlbjogJ3Zhcl9nbG9iYWwnLCBjbG9zZTogJ2VuZF92YXInIH0sXG4gICAgICAgIHsgb3BlbjogJ3Zhcl9hY2Nlc3MnLCBjbG9zZTogJ2VuZF92YXInIH0sXG4gICAgICAgIHsgb3BlbjogJ3Zhcl9leHRlcm5hbCcsIGNsb3NlOiAnZW5kX3ZhcicgfSxcbiAgICAgICAgeyBvcGVuOiAndHlwZScsIGNsb3NlOiAnZW5kX3R5cGUnIH0sXG4gICAgICAgIHsgb3BlbjogJ3N0cnVjdCcsIGNsb3NlOiAnZW5kX3N0cnVjdCcgfSxcbiAgICAgICAgeyBvcGVuOiAncHJvZ3JhbScsIGNsb3NlOiAnZW5kX3Byb2dyYW0nIH0sXG4gICAgICAgIHsgb3BlbjogJ2Z1bmN0aW9uJywgY2xvc2U6ICdlbmRfZnVuY3Rpb24nIH0sXG4gICAgICAgIHsgb3BlbjogJ2Z1bmN0aW9uX2Jsb2NrJywgY2xvc2U6ICdlbmRfZnVuY3Rpb25fYmxvY2snIH0sXG4gICAgICAgIHsgb3BlbjogJ2FjdGlvbicsIGNsb3NlOiAnZW5kX2FjdGlvbicgfSxcbiAgICAgICAgeyBvcGVuOiAnc3RlcCcsIGNsb3NlOiAnZW5kX3N0ZXAnIH0sXG4gICAgICAgIHsgb3BlbjogJ2luaXRpYWxfc3RlcCcsIGNsb3NlOiAnZW5kX3N0ZXAnIH0sXG4gICAgICAgIHsgb3BlbjogJ3RyYW5zYWN0aW9uJywgY2xvc2U6ICdlbmRfdHJhbnNhY3Rpb24nIH0sXG4gICAgICAgIHsgb3BlbjogJ2NvbmZpZ3VyYXRpb24nLCBjbG9zZTogJ2VuZF9jb25maWd1cmF0aW9uJyB9LFxuICAgICAgICB7IG9wZW46ICd0Y3AnLCBjbG9zZTogJ2VuZF90Y3AnIH0sXG4gICAgICAgIHsgb3BlbjogJ3JlY291cmNlJywgY2xvc2U6ICdlbmRfcmVjb3VyY2UnIH0sXG4gICAgICAgIHsgb3BlbjogJ2NoYW5uZWwnLCBjbG9zZTogJ2VuZF9jaGFubmVsJyB9LFxuICAgICAgICB7IG9wZW46ICdsaWJyYXJ5JywgY2xvc2U6ICdlbmRfbGlicmFyeScgfSxcbiAgICAgICAgeyBvcGVuOiAnZm9sZGVyJywgY2xvc2U6ICdlbmRfZm9sZGVyJyB9LFxuICAgICAgICB7IG9wZW46ICdiaW5hcmllcycsIGNsb3NlOiAnZW5kX2JpbmFyaWVzJyB9LFxuICAgICAgICB7IG9wZW46ICdpbmNsdWRlcycsIGNsb3NlOiAnZW5kX2luY2x1ZGVzJyB9LFxuICAgICAgICB7IG9wZW46ICdzb3VyY2VzJywgY2xvc2U6ICdlbmRfc291cmNlcycgfVxuICAgIF0sXG4gICAgZm9sZGluZzoge1xuICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICBzdGFydDogbmV3IFJlZ0V4cCgnXlxcXFxzKiNwcmFnbWFcXFxccytyZWdpb25cXFxcYicpLFxuICAgICAgICAgICAgZW5kOiBuZXcgUmVnRXhwKCdeXFxcXHMqI3ByYWdtYVxcXFxzK2VuZHJlZ2lvblxcXFxiJylcbiAgICAgICAgfVxuICAgIH1cbn07XG5leHBvcnQgdmFyIGxhbmd1YWdlID0ge1xuICAgIGRlZmF1bHRUb2tlbjogJycsXG4gICAgdG9rZW5Qb3N0Zml4OiAnLnN0JyxcbiAgICBpZ25vcmVDYXNlOiB0cnVlLFxuICAgIGJyYWNrZXRzOiBbXG4gICAgICAgIHsgdG9rZW46ICdkZWxpbWl0ZXIuY3VybHknLCBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcbiAgICAgICAgeyB0b2tlbjogJ2RlbGltaXRlci5wYXJlbnRoZXNpcycsIG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxuICAgICAgICB7IHRva2VuOiAnZGVsaW1pdGVyLnNxdWFyZScsIG9wZW46ICdbJywgY2xvc2U6ICddJyB9XG4gICAgXSxcbiAgICBrZXl3b3JkczogW1xuICAgICAgICAnaWYnLFxuICAgICAgICAnZW5kX2lmJyxcbiAgICAgICAgJ2Vsc2lmJyxcbiAgICAgICAgJ2Vsc2UnLFxuICAgICAgICAnY2FzZScsXG4gICAgICAgICdvZicsXG4gICAgICAgICd0bycsXG4gICAgICAgICdfX3RyeScsXG4gICAgICAgICdfX2NhdGNoJyxcbiAgICAgICAgJ19fZmluYWxseScsXG4gICAgICAgICdkbycsXG4gICAgICAgICd3aXRoJyxcbiAgICAgICAgJ2J5JyxcbiAgICAgICAgJ3doaWxlJyxcbiAgICAgICAgJ3JlcGVhdCcsXG4gICAgICAgICdlbmRfd2hpbGUnLFxuICAgICAgICAnZW5kX3JlcGVhdCcsXG4gICAgICAgICdlbmRfY2FzZScsXG4gICAgICAgICdmb3InLFxuICAgICAgICAnZW5kX2ZvcicsXG4gICAgICAgICd0YXNrJyxcbiAgICAgICAgJ3JldGFpbicsXG4gICAgICAgICdub25fcmV0YWluJyxcbiAgICAgICAgJ2NvbnN0YW50JyxcbiAgICAgICAgJ3dpdGgnLFxuICAgICAgICAnYXQnLFxuICAgICAgICAnZXhpdCcsXG4gICAgICAgICdyZXR1cm4nLFxuICAgICAgICAnaW50ZXJ2YWwnLFxuICAgICAgICAncHJpb3JpdHknLFxuICAgICAgICAnYWRkcmVzcycsXG4gICAgICAgICdwb3J0JyxcbiAgICAgICAgJ29uX2NoYW5uZWwnLFxuICAgICAgICAndGhlbicsXG4gICAgICAgICdpZWMnLFxuICAgICAgICAnZmlsZScsXG4gICAgICAgICd1c2VzJyxcbiAgICAgICAgJ3ZlcnNpb24nLFxuICAgICAgICAncGFja2FnZXR5cGUnLFxuICAgICAgICAnZGlzcGxheW5hbWUnLFxuICAgICAgICAnY29weXJpZ2h0JyxcbiAgICAgICAgJ3N1bW1hcnknLFxuICAgICAgICAndmVuZG9yJyxcbiAgICAgICAgJ2NvbW1vbl9zb3VyY2UnLFxuICAgICAgICAnZnJvbScsXG4gICAgICAgICdleHRlbmRzJ1xuICAgIF0sXG4gICAgY29uc3RhbnQ6IFsnZmFsc2UnLCAndHJ1ZScsICdudWxsJ10sXG4gICAgZGVmaW5lS2V5d29yZHM6IFtcbiAgICAgICAgJ3ZhcicsXG4gICAgICAgICd2YXJfaW5wdXQnLFxuICAgICAgICAndmFyX291dHB1dCcsXG4gICAgICAgICd2YXJfaW5fb3V0JyxcbiAgICAgICAgJ3Zhcl90ZW1wJyxcbiAgICAgICAgJ3Zhcl9nbG9iYWwnLFxuICAgICAgICAndmFyX2FjY2VzcycsXG4gICAgICAgICd2YXJfZXh0ZXJuYWwnLFxuICAgICAgICAnZW5kX3ZhcicsXG4gICAgICAgICd0eXBlJyxcbiAgICAgICAgJ2VuZF90eXBlJyxcbiAgICAgICAgJ3N0cnVjdCcsXG4gICAgICAgICdlbmRfc3RydWN0JyxcbiAgICAgICAgJ3Byb2dyYW0nLFxuICAgICAgICAnZW5kX3Byb2dyYW0nLFxuICAgICAgICAnZnVuY3Rpb24nLFxuICAgICAgICAnZW5kX2Z1bmN0aW9uJyxcbiAgICAgICAgJ2Z1bmN0aW9uX2Jsb2NrJyxcbiAgICAgICAgJ2VuZF9mdW5jdGlvbl9ibG9jaycsXG4gICAgICAgICdpbnRlcmZhY2UnLFxuICAgICAgICAnZW5kX2ludGVyZmFjZScsXG4gICAgICAgICdtZXRob2QnLFxuICAgICAgICAnZW5kX21ldGhvZCcsXG4gICAgICAgICdwcm9wZXJ0eScsXG4gICAgICAgICdlbmRfcHJvcGVydHknLFxuICAgICAgICAnbmFtZXNwYWNlJyxcbiAgICAgICAgJ2VuZF9uYW1lc3BhY2UnLFxuICAgICAgICAnY29uZmlndXJhdGlvbicsXG4gICAgICAgICdlbmRfY29uZmlndXJhdGlvbicsXG4gICAgICAgICd0Y3AnLFxuICAgICAgICAnZW5kX3RjcCcsXG4gICAgICAgICdyZXNvdXJjZScsXG4gICAgICAgICdlbmRfcmVzb3VyY2UnLFxuICAgICAgICAnY2hhbm5lbCcsXG4gICAgICAgICdlbmRfY2hhbm5lbCcsXG4gICAgICAgICdsaWJyYXJ5JyxcbiAgICAgICAgJ2VuZF9saWJyYXJ5JyxcbiAgICAgICAgJ2ZvbGRlcicsXG4gICAgICAgICdlbmRfZm9sZGVyJyxcbiAgICAgICAgJ2JpbmFyaWVzJyxcbiAgICAgICAgJ2VuZF9iaW5hcmllcycsXG4gICAgICAgICdpbmNsdWRlcycsXG4gICAgICAgICdlbmRfaW5jbHVkZXMnLFxuICAgICAgICAnc291cmNlcycsXG4gICAgICAgICdlbmRfc291cmNlcycsXG4gICAgICAgICdhY3Rpb24nLFxuICAgICAgICAnZW5kX2FjdGlvbicsXG4gICAgICAgICdzdGVwJyxcbiAgICAgICAgJ2luaXRpYWxfc3RlcCcsXG4gICAgICAgICdlbmRfc3RlcCcsXG4gICAgICAgICd0cmFuc2FjdGlvbicsXG4gICAgICAgICdlbmRfdHJhbnNhY3Rpb24nXG4gICAgXSxcbiAgICB0eXBlS2V5d29yZHM6IFtcbiAgICAgICAgJ2ludCcsXG4gICAgICAgICdzaW50JyxcbiAgICAgICAgJ2RpbnQnLFxuICAgICAgICAnbGludCcsXG4gICAgICAgICd1c2ludCcsXG4gICAgICAgICd1aW50JyxcbiAgICAgICAgJ3VkaW50JyxcbiAgICAgICAgJ3VsaW50JyxcbiAgICAgICAgJ3JlYWwnLFxuICAgICAgICAnbHJlYWwnLFxuICAgICAgICAndGltZScsXG4gICAgICAgICdkYXRlJyxcbiAgICAgICAgJ3RpbWVfb2ZfZGF5JyxcbiAgICAgICAgJ2RhdGVfYW5kX3RpbWUnLFxuICAgICAgICAnc3RyaW5nJyxcbiAgICAgICAgJ2Jvb2wnLFxuICAgICAgICAnYnl0ZScsXG4gICAgICAgICd3b3JkJyxcbiAgICAgICAgJ2R3b3JkJyxcbiAgICAgICAgJ2FycmF5JyxcbiAgICAgICAgJ3BvaW50ZXInLFxuICAgICAgICAnbHdvcmQnXG4gICAgXSxcbiAgICBvcGVyYXRvcnM6IFtcbiAgICAgICAgJz0nLFxuICAgICAgICAnPicsXG4gICAgICAgICc8JyxcbiAgICAgICAgJzonLFxuICAgICAgICAnOj0nLFxuICAgICAgICAnPD0nLFxuICAgICAgICAnPj0nLFxuICAgICAgICAnPD4nLFxuICAgICAgICAnJicsXG4gICAgICAgICcrJyxcbiAgICAgICAgJy0nLFxuICAgICAgICAnKicsXG4gICAgICAgICcqKicsXG4gICAgICAgICdNT0QnLFxuICAgICAgICAnXicsXG4gICAgICAgICdvcicsXG4gICAgICAgICdhbmQnLFxuICAgICAgICAnbm90JyxcbiAgICAgICAgJ3hvcicsXG4gICAgICAgICdhYnMnLFxuICAgICAgICAnYWNvcycsXG4gICAgICAgICdhc2luJyxcbiAgICAgICAgJ2F0YW4nLFxuICAgICAgICAnY29zJyxcbiAgICAgICAgJ2V4cCcsXG4gICAgICAgICdleHB0JyxcbiAgICAgICAgJ2xuJyxcbiAgICAgICAgJ2xvZycsXG4gICAgICAgICdzaW4nLFxuICAgICAgICAnc3FydCcsXG4gICAgICAgICd0YW4nLFxuICAgICAgICAnc2VsJyxcbiAgICAgICAgJ21heCcsXG4gICAgICAgICdtaW4nLFxuICAgICAgICAnbGltaXQnLFxuICAgICAgICAnbXV4JyxcbiAgICAgICAgJ3NobCcsXG4gICAgICAgICdzaHInLFxuICAgICAgICAncm9sJyxcbiAgICAgICAgJ3JvcicsXG4gICAgICAgICdpbmRleG9mJyxcbiAgICAgICAgJ3NpemVvZicsXG4gICAgICAgICdhZHInLFxuICAgICAgICAnYWRyaW5zdCcsXG4gICAgICAgICdiaXRhZHInLFxuICAgICAgICAnaXNfdmFsaWQnLFxuICAgICAgICAncmVmJyxcbiAgICAgICAgJ3JlZl90bydcbiAgICBdLFxuICAgIGJ1aWx0aW5WYXJpYWJsZXM6IFtdLFxuICAgIGJ1aWx0aW5GdW5jdGlvbnM6IFtcbiAgICAgICAgJ3NyJyxcbiAgICAgICAgJ3JzJyxcbiAgICAgICAgJ3RwJyxcbiAgICAgICAgJ3RvbicsXG4gICAgICAgICd0b2YnLFxuICAgICAgICAnZXEnLFxuICAgICAgICAnZ2UnLFxuICAgICAgICAnbGUnLFxuICAgICAgICAnbHQnLFxuICAgICAgICAnbmUnLFxuICAgICAgICAncm91bmQnLFxuICAgICAgICAndHJ1bmMnLFxuICAgICAgICAnY3RkJyxcbiAgICAgICAgJ9GBdHUnLFxuICAgICAgICAnY3R1ZCcsXG4gICAgICAgICdyX3RyaWcnLFxuICAgICAgICAnZl90cmlnJyxcbiAgICAgICAgJ21vdmUnLFxuICAgICAgICAnY29uY2F0JyxcbiAgICAgICAgJ2RlbGV0ZScsXG4gICAgICAgICdmaW5kJyxcbiAgICAgICAgJ2luc2VydCcsXG4gICAgICAgICdsZWZ0JyxcbiAgICAgICAgJ2xlbicsXG4gICAgICAgICdyZXBsYWNlJyxcbiAgICAgICAgJ3JpZ2h0JyxcbiAgICAgICAgJ3J0YydcbiAgICBdLFxuICAgIC8vIHdlIGluY2x1ZGUgdGhlc2UgY29tbW9uIHJlZ3VsYXIgZXhwcmVzc2lvbnNcbiAgICBzeW1ib2xzOiAvWz0+PCF+PzomfCtcXC0qXFwvXFxeJV0rLyxcbiAgICAvLyBDIyBzdHlsZSBzdHJpbmdzXG4gICAgZXNjYXBlczogL1xcXFwoPzpbYWJmbnJ0dlxcXFxcIiddfHhbMC05QS1GYS1mXXsxLDR9fHVbMC05QS1GYS1mXXs0fXxVWzAtOUEtRmEtZl17OH0pLyxcbiAgICAvLyBUaGUgbWFpbiB0b2tlbml6ZXIgZm9yIG91ciBsYW5ndWFnZXNcbiAgICB0b2tlbml6ZXI6IHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgWy8oXFwuXFwuKS8sICdkZWxpbWl0ZXInXSxcbiAgICAgICAgICAgIFsvXFxiKDE2I1swLTlBLUZhLWZcXF9dKikrXFxiLywgJ251bWJlci5oZXgnXSxcbiAgICAgICAgICAgIFsvXFxiKDIjWzAxXFxfXSspK1xcYi8sICdudW1iZXIuYmluYXJ5J10sXG4gICAgICAgICAgICBbL1xcYig4I1swLTlcXF9dKikrXFxiLywgJ251bWJlci5vY3RhbCddLFxuICAgICAgICAgICAgWy9cXGJcXGQqXFwuXFxkKyhbZUVdW1xcLStdP1xcZCspP1xcYi8sICdudW1iZXIuZmxvYXQnXSxcbiAgICAgICAgICAgIFsvXFxiKEw/UkVBTCkjWzAtOVxcX1xcLmVdK1xcYi8sICdudW1iZXIuZmxvYXQnXSxcbiAgICAgICAgICAgIFsvXFxiKEJZVEV8KD86RHxMKT9XT1JEfFU/KD86U3xEfEwpP0lOVCkjWzAtOVxcX10rXFxiLywgJ251bWJlciddLFxuICAgICAgICAgICAgWy9cXGQrLywgJ251bWJlciddLFxuICAgICAgICAgICAgWy9cXGIoVHxEVHxUT0QpI1swLTk6LV9zaG15ZF0rXFxiLywgJ3RhZyddLFxuICAgICAgICAgICAgWy9cXCUoSXxRfE0pKFh8QnxXfER8TClbMC05XFwuXSsvLCAndGFnJ10sXG4gICAgICAgICAgICBbL1xcJShJfFF8TSlbMC05XFwuXSovLCAndGFnJ10sXG4gICAgICAgICAgICBbL1xcYltBLVphLXpdezEsNn0jWzAtOV0rXFxiLywgJ3RhZyddLFxuICAgICAgICAgICAgWy9cXGIoVE9ffENUVV98Q1REX3xDVFVEX3xNVVhffFNFTF8pW0FfWmEtel0rXFxiLywgJ3ByZWRlZmluZWQnXSxcbiAgICAgICAgICAgIFsvXFxiW0FfWmEtel0rKF9UT18pW0FfWmEtel0rXFxiLywgJ3ByZWRlZmluZWQnXSxcbiAgICAgICAgICAgIFsvWztdLywgJ2RlbGltaXRlciddLFxuICAgICAgICAgICAgWy9bLl0vLCB7IHRva2VuOiAnZGVsaW1pdGVyJywgbmV4dDogJ0BwYXJhbXMnIH1dLFxuICAgICAgICAgICAgLy8gaWRlbnRpZmllcnMgYW5kIGtleXdvcmRzXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgL1thLXpBLVpfXVxcdyovLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdAb3BlcmF0b3JzJzogJ29wZXJhdG9ycycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGtleXdvcmRzJzogJ2tleXdvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0B0eXBlS2V5d29yZHMnOiAndHlwZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmluZUtleXdvcmRzJzogJ3ZhcmlhYmxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdAY29uc3RhbnQnOiAnY29uc3RhbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BidWlsdGluVmFyaWFibGVzJzogJ3ByZWRlZmluZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BidWlsdGluRnVuY3Rpb25zJzogJ3ByZWRlZmluZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogJ2lkZW50aWZpZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQHdoaXRlc3BhY2UnIH0sXG4gICAgICAgICAgICBbL1t7fSgpXFxbXFxdXS8sICdAYnJhY2tldHMnXSxcbiAgICAgICAgICAgIFsvXCIoW15cIlxcXFxdfFxcXFwuKSokLywgJ3N0cmluZy5pbnZhbGlkJ10sXG4gICAgICAgICAgICBbL1wiLywgeyB0b2tlbjogJ3N0cmluZy5xdW90ZScsIGJyYWNrZXQ6ICdAb3BlbicsIG5leHQ6ICdAc3RyaW5nX2RxJyB9XSxcbiAgICAgICAgICAgIFsvJy8sIHsgdG9rZW46ICdzdHJpbmcucXVvdGUnLCBicmFja2V0OiAnQG9wZW4nLCBuZXh0OiAnQHN0cmluZ19zcScgfV0sXG4gICAgICAgICAgICBbLydbXlxcXFwnXScvLCAnc3RyaW5nJ10sXG4gICAgICAgICAgICBbLygnKShAZXNjYXBlcykoJykvLCBbJ3N0cmluZycsICdzdHJpbmcuZXNjYXBlJywgJ3N0cmluZyddXSxcbiAgICAgICAgICAgIFsvJy8sICdzdHJpbmcuaW52YWxpZCddXG4gICAgICAgIF0sXG4gICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgWy9cXGJbQS1aYS16MC05X10rXFxiKD89XFwoKS8sIHsgdG9rZW46ICdpZGVudGlmaWVyJywgbmV4dDogJ0Bwb3AnIH1dLFxuICAgICAgICAgICAgWy9cXGJbQS1aYS16MC05X10rXFxiLywgJ3ZhcmlhYmxlLm5hbWUnLCAnQHBvcCddXG4gICAgICAgIF0sXG4gICAgICAgIGNvbW1lbnQ6IFtcbiAgICAgICAgICAgIFsvW15cXC8qXSsvLCAnY29tbWVudCddLFxuICAgICAgICAgICAgWy9cXC9cXCovLCAnY29tbWVudCcsICdAcHVzaCddLFxuICAgICAgICAgICAgWydcXFxcKi8nLCAnY29tbWVudCcsICdAcG9wJ10sXG4gICAgICAgICAgICBbL1tcXC8qXS8sICdjb21tZW50J11cbiAgICAgICAgXSxcbiAgICAgICAgY29tbWVudDI6IFtcbiAgICAgICAgICAgIFsvW15cXCgqXSsvLCAnY29tbWVudCddLFxuICAgICAgICAgICAgWy9cXChcXCovLCAnY29tbWVudCcsICdAcHVzaCddLFxuICAgICAgICAgICAgWydcXFxcKlxcXFwpJywgJ2NvbW1lbnQnLCAnQHBvcCddLFxuICAgICAgICAgICAgWy9bXFwoKl0vLCAnY29tbWVudCddXG4gICAgICAgIF0sXG4gICAgICAgIHdoaXRlc3BhY2U6IFtcbiAgICAgICAgICAgIFsvWyBcXHRcXHJcXG5dKy8sICd3aGl0ZSddLFxuICAgICAgICAgICAgWy9cXC9cXC8uKiQvLCAnY29tbWVudCddLFxuICAgICAgICAgICAgWy9cXC9cXCovLCAnY29tbWVudCcsICdAY29tbWVudCddLFxuICAgICAgICAgICAgWy9cXChcXCovLCAnY29tbWVudCcsICdAY29tbWVudDInXVxuICAgICAgICBdLFxuICAgICAgICBzdHJpbmdfZHE6IFtcbiAgICAgICAgICAgIFsvW15cXFxcXCJdKy8sICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFsvQGVzY2FwZXMvLCAnc3RyaW5nLmVzY2FwZSddLFxuICAgICAgICAgICAgWy9cXFxcLi8sICdzdHJpbmcuZXNjYXBlLmludmFsaWQnXSxcbiAgICAgICAgICAgIFsvXCIvLCB7IHRva2VuOiAnc3RyaW5nLnF1b3RlJywgYnJhY2tldDogJ0BjbG9zZScsIG5leHQ6ICdAcG9wJyB9XVxuICAgICAgICBdLFxuICAgICAgICBzdHJpbmdfc3E6IFtcbiAgICAgICAgICAgIFsvW15cXFxcJ10rLywgJ3N0cmluZyddLFxuICAgICAgICAgICAgWy9AZXNjYXBlcy8sICdzdHJpbmcuZXNjYXBlJ10sXG4gICAgICAgICAgICBbL1xcXFwuLywgJ3N0cmluZy5lc2NhcGUuaW52YWxpZCddLFxuICAgICAgICAgICAgWy8nLywgeyB0b2tlbjogJ3N0cmluZy5xdW90ZScsIGJyYWNrZXQ6ICdAY2xvc2UnLCBuZXh0OiAnQHBvcCcgfV1cbiAgICAgICAgXVxuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=